#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("@ytt:assert", "assert")

#@ resource_name = data.values.resource_name or assert.fail("resource name must be specified")

#@ def build_params(resource_name):
  #@ if resource_name == "registry-image":
CONTEXT: #@ resource_name + "-resource"
BUILD_ARG_DOCKER_PRIVATE_PASSWORD: ((registry_image_resource_docker.password))
BUILD_ARG_DOCKER_PRIVATE_REPO: ((registry_image_resource_docker.private_repo))
BUILD_ARG_DOCKER_PRIVATE_USERNAME: ((registry_image_resource_docker.username))

BUILD_ARG_DOCKER_PUSH_PASSWORD: ((registry_image_resource_docker.password))
BUILD_ARG_DOCKER_PUSH_REPO: ((registry_image_resource_docker.push_repo))
BUILD_ARG_DOCKER_PUSH_USERNAME: ((registry_image_resource_docker.username))

BUILD_ARG_GCR_PUSH_SERVICE_ACCOUNT_KEY: ((registry_image_resource_gcr.service_account_key))
BUILD_ARG_GCR_PUSH_REPO: ((registry_image_resource_gcr.repo))
  #@ elif resource_name == "docker-image":
CONTEXT: #@ resource_name + "-resource"
UNPACK_ROOTFS: 'true'
  #@ else:
CONTEXT: #@ resource_name + "-resource"
  #@ end
#@ end

#@ def build_task(resource_name, platform):
task: build
privileged: true
image: oci-build-task
attempts: 2
config:
  platform: linux
  inputs:
  - name: #@ resource_name + "-resource"
  - name: base-image
  outputs:
  - name: built-resource-image
    path: image
  params:
    DOCKERFILE: #@ resource_name + "-resource/Dockerfile"
    ADDITIONAL_TARGETS: tests
    IMAGE_ARG_base_image: base-image/image.tar
    BUILD_ARG_builder_image: concourse/golang-builder
    IMAGE_PLATFORM: #@ platform
    _: #@ template.replace(build_params(resource_name))
  run: {path: build}
#@ end

#@ def build_image():
name: build
serial_groups: [build]
plan:
- in_parallel:
  - get: daily-trigger
    trigger: true
  - get: #@ resource_name + "-resource"
    resource: resource-repo
    trigger: true
  - get: base-image
    trigger: true
    params: {format: oci}
  - get: golang-builder
    trigger: true
    params: {skip_download: true}
  - get: oci-build-task
  - #@ template.replace(extra_get_steps())
- #@ build_task(resource_name, "linux/amd64")
- #@ template.replace(extra_steps())
- put: resource-image-dev
  params: {image: built-resource-image/image.tar}
  get_params:
    skip_download: true
#@ end

#@ def scan_image():
name: scan-image
plan:
- in_parallel:
  - get: ci
  - get: resource-repo
    passed:
    - build
  - get: resource-image-dev
    passed: [build]
    params: {format: oci}
    trigger: true
  - get: trivy
    trigger: true
- task: scan
  image: trivy
  file: ci/tasks/trivy-scan.yml
  input_mapping: {image: resource-image-dev}
#@ end

#@ def extra_steps():
  #@ if resource_name == "docker-image":
- task: smoke-test
  image: built-resource-image
  file: docker-image-resource/ci/smoke-test.yml
  privileged: true
  params:
    REPOSITORY: busybox
  output_mapping:
    fetched-image: busybox
- task: use-fetched-image
  image: busybox
  config:
    platform: linux
    run:
      path: /bin/true
  #@ else: return []
#@ end

#@ def validate_pr():
name: prs
public: true
serial: true
serial_groups:
- validate
plan:
- in_parallel:
  - get: resource-pr
    trigger: true
    version: every
  - get: base-image
    trigger: true
    params: {format: oci}
  - get: oci-build-task
  - #@ template.replace(extra_get_steps())
- put: #@ resource_name + "-resource"
  resource: resource-pr
  params:
    context: status
    path: resource-pr
    status: pending
- do:
  - #@ build_task(resource_name, "linux/amd64")
  - #@ template.replace(extra_steps())
  on_failure:
    put: resource-pr
    params:
      context: status
      path: resource-pr
      status: failure
  on_success:
    put: resource-pr
    params:
      context: status
      path: resource-pr
      status: success
#@ end


#@ def extra_get_steps():
  #@ if resource_name == "cf":
- get: cf-cli
  trigger: true
  params: {globs: ["cf-cli*linux*"]}
  #@ else: return []
#@ end

#@ def publish_job(bump):
name: #@ "publish-" + bump
plan:
- in_parallel:
  - get: resource-repo
    passed: [scan-image]
  - get: ci
  - get: release-me
  - get: resource-image-dev
    passed: [scan-image]
    params: {format: oci}
  - get: resource-image-dev-rootfs
    resource: resource-image-dev
    passed: [scan-image]
    params: {format: rootfs}
  - get: version
    params:
      bump: #@ bump
- task: create-release
  config:
    platform: linux
    image_resource:
      type: registry-image
      source:
        repository: ubuntu
        tag: jammy
    inputs:
    - name: version
    - name: resource-image-dev-rootfs
    outputs:
    - name: release
    run:
      path: bash
      args:
      - "-exc"
      #@yaml/text-templated-strings
      - |
        cat <<EOF > resource_metadata.json
        {
          "type": "(@= resource_name @)",
          "version": "$(cat version/number)",
          "privileged": (@= str(privileged()).lower() @),
          "unique_version_history": (@= str(unique_version_history()).lower() @)
        }
        EOF

        version="$(cat version/number)"
        echo "v${version}" > release/name

        pushd resource-image-dev-rootfs
          cp ../resource_metadata.json .
          tar -czf rootfs.tgz -C rootfs .
          tar -czf ../release/(@= resource_name @)-resource-${version}.tgz rootfs.tgz resource_metadata.json
        popd

- task: build-release-notes
  file: ci/tasks/build-release-notes.yml
  params:
    GITHUB_OWNER: concourse
    GITHUB_REPO: #@ resource_name + "-resource"
    GITHUB_TOKEN: ((github/concourse/release_token))
    GITHUB_BRANCH: master
  input_mapping:
    repo: resource-repo
- load_var: version
  file: version/version
  reveal: true
- in_parallel:
  - put: resource-image
    params:
      image: resource-image-dev/image.tar
      version: ((.:version))
      bump_aliases: true
    get_params:
      skip_download: true
  - put: resource-repo-release
    params:
      commitish: resource-repo/.git/ref
      body: built-notes/notes.md
      globs:
      - release/*.tgz
      name: release/name
      tag: version/version
      tag_prefix: v
- put: version
  params:
    file: version/version
#@ end

#@ def rebuild_images():
name: republish-images
serial_groups: [build]
plan:
- in_parallel:
  - get: daily-trigger
    trigger: true
  - get: #@ resource_name + "-resource"
    resource: resource-repo-tags
  - get: base-image
    trigger: true
    params: {format: oci}
  - get: oci-build-task
  - get: version
  - get: ci
  - #@ template.replace(extra_get_steps())
- load_var: version
  file: version/version
  reveal: true
- #@ build_task(resource_name, "linux/amd64")
- #@ template.replace(extra_steps())
- task: date-tag
  image: oci-build-task
  file: ci/tasks/tag-version-with-date.yml
  params:
    VERSION: ((.:version))
- put: resource-image
  params:
    image: built-resource-image/image.tar
    version: ((.:version))
    bump_aliases: true
    additional_tags: date-tag/tag
  get_params:
    skip_download: true
#@ end

#@ def unique_version_history():
#@ return resource_name == "time"
#@ end

#@ def privileged():
#@ return resource_name == "docker-image"
#@ end

---
groups:
- name: main
  jobs:
  - prs
  - build
  - scan-*
  - publish-*
- name: republish
  jobs:
  - republish-*

jobs:
- #@ build_image()
- #@ scan_image()
- #@ validate_pr()
- #@ publish_job("major")
- #@ publish_job("minor")
- #@ publish_job("patch")
- #@ rebuild_images()

resource_types:
- name: pull-request
  type: registry-image
  check_every: 2m
  source:
    repository: teliaoss/github-pr-resource

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: base-image
  type: registry-image
  icon: docker
  source:
    #! we need to tweak original image for ARM build
    repository: ((base-image))
    tag: latest
    username: ((docker.username))
    password: ((docker.public_read))

- name: golang-builder
  type: registry-image
  icon: docker
  source:
    repository: concourse/golang-builder
    variant: jammy
    username: ((docker.username))
    password: ((docker.public_read))

- name: trivy
  type: registry-image
  icon: docker
  source:
    repository: aquasec/trivy
    username: ((docker.username))
    password: ((docker.public_read))

- name: resource-repo
  type: git
  icon: github
  source:
    branch: master
    private_key: #@ "((github/concourse/" + resource_name + ".private_key))"
    uri: #@ "git@github.com:concourse/" + resource_name + "-resource"

- name: resource-repo-tags
  type: git
  icon: github
  source:
    branch: master
    private_key: #@ "((github/concourse/" + resource_name + ".private_key))"
    uri: #@ "git@github.com:concourse/" + resource_name + "-resource"
    tag_filter: "v*"

- name: resource-repo-release
  type: github-release
  icon: package-variant-closed
  source:
    access_token: ((github/concourse/release_token))
    owner: concourse
    repository: #@ resource_name + "-resource"

- name: version
  type: semver
  icon: tag
  source:
    branch: version
    driver: git
    file: version
    private_key: #@ "((github/concourse/" + resource_name + ".private_key))"
    uri: #@ "git@github.com:concourse/" + resource_name + "-resource"

- name: resource-pr
  type: pull-request
  icon: source-pull
  check_every: 2m
  source:
    access_token: ((github/concourse/pr_token))
    base_branch: master
    repository: #@ "concourse/" + resource_name + "-resource"

- name: resource-image
  type: registry-image
  icon: docker
  source:
    repository: #@ "concourse/" + resource_name + "-resource"
    username: ((docker.username))
    password: ((docker.read_write))

- name: resource-image-dev
  type: registry-image
  icon: docker
  source:
    repository: #@ "concourse/" + resource_name + "-resource"
    tag: dev
    username: ((docker.username))
    password: ((docker.read_write))

- name: ci
  type: git
  icon: github
  source:
    uri: https://github.com/concourse/ci.git
    private_key: ((github/concourse/ci.private_key))
    branch: master

- name: release-me
  type: github-release
  icon: package-down
  source:
    owner: clarafu
    repository: release-me
    access_token: ((github/release_token))

- name: oci-build-task
  type: registry-image
  icon: docker
  source:
    repository: concourse/oci-build-task
    username: ((docker.username))
    password: ((docker.public_read))

- name: daily-trigger
  type: time
  source:
    start: 1AM
    stop: 2AM

#@ if resource_name == "cf":
- name: cf-cli
  type: s3
  source:
    bucket: cf-cli-releases
    regexp: "releases/v([\\d\\.]+)/cf-cli_.*_linux_x86-64.tgz"
    region_name: us-west-1
#@ end
