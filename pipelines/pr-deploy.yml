# the following vars must be specified:
#
#   ((number))              the PR number
#   ((branch))              only PRs against this branch will be run
#   ((dev_image_tag))       the tag to use for the dev image
#   ((concourse_image_tag)) the tag to use for the concourse image for upgrade/downgrade test in integration

---

icons:
  git: &git-icon git
  docker: &image-icon docker

pending_status_notification: &pending_status_notification
  put: concourse-status-update
  resource: concourse-pr
  inputs: [concourse]
  params: {path: concourse, status: pending, context: $BUILD_JOB_NAME}
  get_params: {skip_download: true}


status_notifications: &status_notifications
  on_success:
    put: concourse-pr
    inputs: [concourse]
    params: {path: concourse, status: success, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}
  on_failure:
    put: concourse-pr
    inputs: [concourse]
    params: {path: concourse, status: failure, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}

resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

- name: slack-notifier
  type: registry-image
  # Switch back to mockersf/concourse-slack-notifier once
  # https://github.com/mockersf/concourse-slack-notifier/pull/86 is merged
  source: {repository: aoldershaw/concourse-slack-notifier}

- name: pull-request
  type: registry-image
  source: {repository: loggregatorbot/github-pr-resource}

- name: manual-trigger-guard
  type: registry-image
  source: {repository: aoldershaw/manual-trigger-guard}

jobs:
- name: unit
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      trigger: true
    - get: concourse-base
    - get: unit-image
    - get: ci
  - *pending_status_notification
  - timeout: 10m
    in_parallel:
    - task: check-migration-order
      timeout: 5m
      file: ci/tasks/check-migration-order.yml
      input_mapping: {concourse-pr: concourse}
    - task: yarn-analyse
      attempts: 3
      file: ci/tasks/yarn-analyse.yml
    - task: yarn-test
      attempts: 3
      image: unit-image
      file: ci/tasks/yarn-test.yml
    - task: yarn-benchmark
      attempts: 3
      file: ci/tasks/yarn-benchmark.yml
  - timeout: 1h
    in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
    - task: unit-baggageclaim
      image: unit-image
      file: ci/tasks/unit-baggageclaim.yml
      privileged: true

- name: pr-image
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      trigger: true
    - get: oci-build-task
    - get: dev-image
      params: {format: oci}
    - get: unit-image
    - get: ci
  - *pending_status_notification
  - task: yarn-build
    image: unit-image
    attempts: 3
    file: ci/tasks/yarn-build.yml
  - task: build
    image: oci-build-task
    privileged: true
    config:
      platform: linux
      params:
        CONTEXT: built-concourse
        IMAGE_ARG_base_image: dev-image/image.tar
        TARGET: with-fly
      inputs: [{name: built-concourse}, {name: dev-image}]
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: pr-image
    params: {image: image/image.tar}
    get_params: {skip_download: true}

- name: validate-labels
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      trigger: true
    - get: ci
    - get: validator
  - *pending_status_notification
  - task: validate-pr
    timeout: 5m
    file: ci/tasks/validate-pr.yml
    params:
      GITHUB_TOKEN: ((concourse_github_dummy.access_token))
    input_mapping: {concourse-pr: concourse}

- name: containerd-integration
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      passed: [pr-image]
      trigger: true
    - get: pr-image
      passed: [pr-image]
      trigger: true
    - get: ci
  - *pending_status_notification
  - task: integration
    image: pr-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration.yml

- name: testflight
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      passed: [pr-image]
      trigger: true
    - get: unit-image
    - get: pr-image
      passed: [pr-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: postgres-image-legacy
      params: {format: oci}
    - get: ci
  - *pending_status_notification
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: postgres-image
      values:
      - postgres-image
      - postgres-image-legacy
      max_in_flight: all
    task: testflight
    image: unit-image
    privileged: true
    timeout: 1h
    params:
      RUNTIME: ((.:runtime))
    file: ci/tasks/docker-compose-testflight.yml
    input_mapping: {postgres-image: ((.:postgres-image)), dev-image: pr-image}

- name: watsjs
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      passed: [pr-image]
      trigger: true
    - get: unit-image
    - get: pr-image
      passed: [pr-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - *pending_status_notification
  - task: yarn-build
    image: unit-image
    attempts: 3
    file: ci/tasks/yarn-build.yml
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml
    input_mapping: {concourse: built-concourse, dev-image: pr-image}

- name: integration
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      passed: [pr-image]
      trigger: true
    - get: pr-image
      passed: [pr-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: vault-image
      params: {format: oci}
    - get: ci
  - *pending_status_notification
  - task: integration
    privileged: true
    image: unit-image
    file: ci/tasks/integration.yml
    input_mapping: {dev-image: pr-image}

- name: go-format-check
  public: true
  serial: true
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: concourse-pr
      tags: [pr]
      trigger: true
    - get: unit-image
      tags: [pr]
    - get: ci
      tags: [pr]
  - *pending_status_notification
  - task: check-format-for-go-files
    image: unit-image
    input_mapping:
      concourse: concourse-pr
    tags: [pr]
    file: ci/tasks/check-gofmt.yml

- name: build-concourse
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      passed: [unit, pr-image, testflight, watsjs, integration]
      trigger: true
      params: {fetch_tags: true}
    - get: unit-image
    - get: pr-image
      passed: [pr-image]
      trigger: true
    - get: golang-builder-image
    - get: ci
  - in_parallel:
      fail_fast: true
      steps:
        - task: fly-build
          image: golang-builder-image
          file: ci/tasks/fly-build/task.yml
        - task: hoist-linux-dependencies
          file: ci/tasks/hoist-linux-dependencies.yml
          image: pr-image
        - task: hoist-resource-types-alpine
          file: ci/tasks/hoist-linux-resource-types.yml
          image: pr-image
          output_mapping: {resource-types: resource-types-alpine}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
          attempts: 3
  - task: get-dev-version
    file: ci/tasks/get-dev-version.yml
    image: golang-builder-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-alpine
        file: ci/tasks/concourse-build.yml
        image: golang-builder-image
        params: {PLATFORM: linux}
        input_mapping: {concourse: built-concourse, resource-types: resource-types-alpine}
        output_mapping: {concourse-tarball: concourse-linux-alpine}
      - task: concourse-windows
        file: ci/tasks/concourse-build.yml
        image: golang-builder-image
        params: {PLATFORM: windows}
        input_mapping: {concourse: built-concourse}
        output_mapping: {concourse-tarball: concourse-windows}
      - task: concourse-darwin
        file: ci/tasks/concourse-build.yml
        image: golang-builder-image
        params: {PLATFORM: darwin}
        input_mapping: {concourse: built-concourse}
        output_mapping: {concourse-tarball: concourse-darwin}
  - in_parallel:
    - put: linux-dev-alpine
      params: {file: concourse-linux-alpine/concourse-*.tgz}
      inputs: [concourse-linux-alpine]
    - put: windows-dev
      params: {file: concourse-windows/concourse-*.zip}
      inputs: [concourse-windows]
    - put: darwin-dev
      params: {file: concourse-darwin/concourse-*.tgz}
      inputs: [concourse-darwin]

- name: build-image
  old_name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      resource: concourse-pr
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: linux-dev-alpine
      trigger: true
      passed: [build-concourse]
    - get: concourse-docker
      trigger: true
    - get: oci-build-task
    - get: ci
  - task: build-alpine
    file: concourse-docker/ci/build-image.yml
    image: oci-build-task
    input_mapping: {linux-rc: linux-dev-alpine}
    output_mapping: {image: image-alpine}
    privileged: true
  - put: concourse-dev-alpine-image
    inputs: [image-alpine]
    params:
      image: image-alpine/image.tar

# - name: bin-smoke
#   public: true
#   serial: true
#   <<: *status_notifications
#   plan:
#   - in_parallel:
#     - get: concourse
#       resource: concourse-pr
#       passed: [build-concourse]
#       trigger: true
#     - get: linux-dev-alpine
#       passed: [build-concourse]
#       trigger: true
#     - get: unit-image
#     - get: ci
#   - *pending_status_notification
#   - across:
#     - var: runtime
#       values:
#       - guardian
#       - containerd
#       max_in_flight: all
#     do:
#     - task: terraform-smoke
#       image: unit-image
#       file: ci/tasks/terraform-smoke.yml
#       input_mapping: {linux-rc: linux-dev-alpine}
#       params:
#         GCP_PROJECT: cf-concourse-production
#         GCP_KEY: ((concourse_smoke_gcp_key))
#         SSH_KEY: ((concourse_smoke_ssh_key))
#         WORKSPACE: pr-((number))-bin-smoke-((.:runtime))
#         TF_VAR_RUNTIME: ((.:runtime))
#     - task: smoke
#       image: unit-image
#       file: ci/tasks/smoke.yml
#       input_mapping: {endpoint-info: outputs}
#     timeout: 20m
#
# - name: bin-smoke-lts
#   public: true
#   serial: true
#   <<: *status_notifications
#   plan:
#   - in_parallel:
#     - get: concourse
#       resource: concourse-pr
#       passed: [build-concourse]
#       trigger: true
#     - get: linux-dev-alpine
#       passed: [build-concourse]
#       trigger: true
#     - get: unit-image
#     - get: ci
#   - *pending_status_notification
#   - across:
#     - var: runtime
#       values:
#       - guardian
#       - containerd
#       max_in_flight: all
#     - var: gcp-image
#       values:
#       - debian-10-buster-v20210122
#       - ubuntu-1604-lts
#       - ubuntu-1804-lts
#       - ubuntu-2004-lts
#       max_in_flight: 1
#     do:
#     - task: terraform-smoke
#       image: unit-image
#       file: ci/tasks/terraform-smoke.yml
#       input_mapping: {linux-rc: linux-dev-alpine}
#       params:
#         GCP_PROJECT: cf-concourse-production
#         GCP_KEY: ((concourse_smoke_gcp_key))
#         SSH_KEY: ((concourse_smoke_ssh_key))
#         WORKSPACE: pr-((number))-bin-smoke-lts-((.:runtime))
#         TF_VAR_GCP_IMAGE: ((.:gcp-image))
#         TF_VAR_RUNTIME: ((.:runtime))
#     - task: smoke
#       image: unit-image
#       file: ci/tasks/smoke.yml
#       input_mapping: {endpoint-info: outputs}
#     timeout: 20m

- name: bump-prod-web
  public: true
  serial: true
  plan:
  - put: allow-maintainers-guard
  - in_parallel:
    - get: infrastructure
    - get: concourse-image
      resource: concourse-dev-alpine-image
      passed: [build-image]
      params: {skip_download: true}
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  - task: bump-versions
    file: infrastructure/tasks/patch-yaml.yml
    input_mapping: {repo: infrastructure}
    output_mapping: {repo-bumped: infrastructure-bumped}
    params:
      FILE: terraform/environments/production/variables.yml
      PATCH:
        concourse_web_image_repo: ((.:concourse_image_repo))
        concourse_web_image_digest: ((.:concourse_image_digest))
      COMMIT: bump production web to PR ((number))
  - put: infrastructure-bump
    inputs: [infrastructure-bumped]
    params:
      repository: infrastructure-bumped
      branch: master

- name: bump-prod-workers
  public: true
  serial: true
  plan:
  - put: allow-maintainers-guard
  - in_parallel:
    - get: infrastructure
    - get: concourse-image
      resource: concourse-dev-alpine-image
      passed: [build-image]
      params: {skip_download: true}
    - get: windows-dev
      passed: [build-concourse]
      params: {skip_download: "true"}
    - get: darwin-dev
      passed: [build-concourse]
      params: {skip_download: "true"}
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  - task: convert-windows-url
    file: infrastructure/tasks/convert-gs-url.yml
    input_mapping: {input: windows-dev}
    output_mapping: {output: windows}
  - task: convert-darwin-url
    file: infrastructure/tasks/convert-gs-url.yml
    input_mapping: {input: darwin-dev}
    output_mapping: {output: darwin}
  - load_var: concourse_windows_bundle_url
    file: windows/url
  - load_var: concourse_darwin_bundle_url
    file: darwin/url
  - task: bump-versions
    file: infrastructure/tasks/patch-yaml.yml
    input_mapping: {repo: infrastructure}
    output_mapping: {repo-bumped: infrastructure-bumped}
    params:
      FILE: terraform/environments/production/variables.yml
      PATCH:
        concourse_worker_image_repo: ((.:concourse_image_repo))
        concourse_worker_image_digest: ((.:concourse_image_digest))
        concourse_windows_bundle_url: ((.:concourse_windows_bundle_url))
        concourse_darwin_bundle_url: ((.:concourse_darwin_bundle_url))
      COMMIT: bump production workers to PR ((number))
  - put: infrastructure-bump
    inputs: [infrastructure-bumped]
    params:
      repository: infrastructure-bumped
      branch: master

resources:
- name: concourse-base
  type: git
  icon: github
  source:
    uri: https://github.com/concourse/concourse.git
    branch: ((branch))

- name: concourse-pr
  type: pull-request
  icon: source-pull
  source:
    repository: concourse/concourse
    access_token: ((pull_requests_access_token))
    number: ((number))

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: infrastructure
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/infrastructure.git
    branch: master
    private_key: ((greenpeace_private_key))

- name: infrastructure-bump
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/infrastructure.git
    branch: master
    private_key: ((greenpeace_private_key))

- name: pr-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/dev
    tag: pr-((number))
    username: ((docker.username))
    password: ((docker.password))

- name: dev-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/dev
    tag: ((dev_image_tag))
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    tag: ((concourse_image_tag))
    username: ((docker.username))
    password: ((docker.password))

- name: unit-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/unit
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: golang-builder-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.password))
    variant: jammy

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source: {repository: postgres}

- name: postgres-image-legacy
  type: registry-image
  icon: *image-icon
  source: {repository: postgres, tag: 11}

- name: vault-image
  type: registry-image
  icon: *image-icon
  source: {repository: vault}

- name: oci-build-task
  type: registry-image
  icon: *image-icon
  source: {repository: vito/oci-build-task}

- name: validator
  type: github-release
  icon: github
  source:
    owner: clarafu
    repository: release-me
    access_token: ((pull_requests_access_token))

- name: linux-dev-alpine
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: pr/((number))/concourse-(.*)\.linux-alpine\.amd64\.tgz

- name: windows-dev
  type: gcs
  icon: microsoft-windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: pr/((number))/concourse-(.*)\.windows\.amd64\.zip

- name: darwin-dev
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: pr/((number))/concourse-(.*)\.darwin\.amd64\.tgz

- name: concourse-docker
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse-docker
    branch: master

- name: concourse-dev-alpine-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-dev
    tag: pr-((number))
    username: ((docker.username))
    password: ((docker.password))

- name: allow-maintainers-guard
  type: manual-trigger-guard
  expose_build_created_by: true
  source:
    access_token: ((pull_requests_access_token))
    teams: [concourse/maintainers]
