# the following vars must be specified:
#
#   ((release_major))                   the MAJOR version, e.g. 6
#   ((release_minor))                   the MAJOR.MINOR version, e.g. 6.1
#                                       concourse matches the desired release version
#   ((concourse_smoke_deployment_name)) a unique name for the smoke bosh deployment
#   ((latest_release))                  the latest concourse/concourse tag for upgrade testing.
#                                       e.g. 6.6.x -> 6.5, 7.0.x -> 6.7
#   ((resource_type_versions))          a YAML object containing the semver constraints for each of the base resource types. should default to "" for each type for a new release (i.e. no constraint).
#
# the following git branches need to be created:
#
#   concourse/concourse                 release/((release_minor)).x
#   concourse/concourse-bosh-release    release/((release_minor)).x
#   concourse/concourse-bosh-deployment release/((release_minor)).x
#   concourse/concourse-chart           release/((release_minor)).x
#
# everything else will be managed by the pipeline

meta:
  icons:
  - &release-icon package-variant-closed
  - &git-icon github
  - &image-icon docker

resource_types:
- name: bosh-release
  type: registry-image
  source:
    repository: docker.io/taylorsilva/bosh-release-resource
    username: ((docker.username))
    password: ((docker.public_read))

- name: helm-chart
  type: registry-image
  source:
    repository: concourse/helm-chart-resource
    username: ((docker.username))
    password: ((docker.public_read))

- name: pull-request
  type: registry-image
  source:
    repository: aoldershaw/github-pr-resource
    username: ((docker.username))
    password: ((docker.public_read))

groups:
- name: develop
  jobs:
  - reconfigure-prs
  - unit
  - integration
  - resource-types-images
  - dev-image
  - testflight
  - worker-runtime
  - watsjs
  - rc
  - build-rc
  - build-rc-image
  - scan-rc-image
  - bin-smoke

- name: k8s
  jobs:
  - k8s-*

- name: bosh
  jobs:
  - bosh-*

- name: publish
  jobs:
  - create-draft-release
  - shipit
  - publish-binaries
  - publish-image
  - generate-dpkg-list
  - publish-bosh-release
  - bump-cbd-versions
  - patch
  - discover-component-version
  - rebuild-images
  - pin-resource-type-versions

- name: all
  jobs:
  - "*"

jobs:
- name: reconfigure-prs
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
      resource: ci-pr-pipeline
      trigger: true
    - get: concourse-prs
      trigger: true
  - load_var: concourse_prs
    file: concourse-prs/prs.json
  - across:
    - var: pr
      values: ((.:concourse_prs))
      max_in_flight: all
    set_pipeline: pr
    team: contributor
    file: ci/pipelines/pr.yml
    instance_vars:
      number: ((.:pr.number))
    vars:
      branch: release/((release_minor)).x
      dev_image_tag: release-((release_minor))
      concourse_image_tag: ((release_minor))

- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: periodic-check
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - timeout: 1h
    in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping:
        concourse: built-concourse
    # TODO: run fly/ tests on mac and windows
    # - task: fly-darwin
    #   file: ci/tasks/fly-darwin.yml
    # - task: fly-windows
    #   file: ci/tasks/fly-windows.yml
    - task: unit-baggageclaim
      image: unit-image
      file: ci/tasks/unit-baggageclaim/config.yml
      privileged: true
      input_mapping:
        concourse: built-concourse
    # TODO: run baggageclaim tests on darwin and windows
    # - task: unit-baggageclaim-darwin
    #   file: ci/tasks/unit-baggageclaim-darwin.yml
    #   input_mapping: {concourse: built-concourse}
    # - task: unit-baggageclaim-windows
    #   file: ci/tasks/unit-baggageclaim-windows.yml
    #   input_mapping: {concourse: built-concourse}

- name: resource-types-images
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: builder
      trigger: true
    - get: periodic-check
      trigger: true
    - get: ci
    - get: bosh-io-release-resource
      trigger: true
    - get: bosh-io-stemcell-resource
      trigger: true
    - get: docker-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: github-release-resource
      trigger: true
    - get: hg-resource
      trigger: true
    - get: mock-resource
      trigger: true
    - get: pool-resource
      trigger: true
    - get: registry-image-resource
      trigger: true
    - get: s3-resource
      trigger: true
    - get: semver-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: tracker-resource
      trigger: true
    - get: busybox
      params:
        format: oci
  - task: build-ubuntu
    privileged: true
    image: builder
    file: ci/tasks/build-resource-types-image/config.yml
    output_mapping:
      image: image_ubuntu
  - put: resource-types-image
    no_get: true
    inputs: detect
    params:
      image: image_ubuntu/image.tar

- name: dev-image
  public: true
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: concourse
        trigger: true
      - get: unit-image
        trigger: true
      - get: golang-builder-image
        trigger: true
        params: {format: oci}
      - get: golang-builder-image-rootfs
        resource: golang-builder-image
        trigger: true
        params: {format: rootfs}
      - get: gdn
        trigger: true
      - get: containerd
        trigger: true
      - get: runc
        trigger: true
      - get: cni
        trigger: true
      - get: dumb-init
        trigger: true
      - get: resource-types-image
        passed: [resource-types-images]
        trigger: true
      - get: builder
      - get: ci
  - in_parallel:
      fail_fast: true
      steps:
      - task: yarn-build
        image: unit-image
        file: ci/tasks/yarn-build.yml
      - task: fly-linux
        image: golang-builder-image-rootfs
        file: ci/tasks/fly-build/config.yml
        output_mapping:
          fly: fly-linux
        params:
          GOOS: linux
      - task: fly-windows
        image: golang-builder-image-rootfs
        file: ci/tasks/fly-build/config.yml
        output_mapping:
          fly: fly-windows
        params:
          GOOS: windows
      - task: fly-darwin
        image: golang-builder-image-rootfs
        file: ci/tasks/fly-build/config.yml
        output_mapping:
          fly: fly-darwin
        params:
          GOOS: darwin
  - task: build
    image: builder
    privileged: true
    input_mapping: {concourse: built-concourse}
    file: ci/tasks/build-dev-image.yml
  - put: dev-image
    no_get: true
    inputs: detect
    params:
      image: image/image.tar

- name: worker-runtime
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      trigger: true
    - get: ci
  - task: integration
    image: dev-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration/config.yml

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: unit-image
      passed: [unit, dev-image]
    - get: postgres-image
      params: {format: oci}
    - get: postgres-image-legacy
      params: {format: oci}
    - get: ci
  - across:
    # We use to test both runtimes, but guardian is too heavy of a burden
    # for the OSS team to support at this time so we're only testing containerd
    - var: postgres-image
      values:
      - postgres-image
      - postgres-image-legacy
      max_in_flight: all
    task: testflight
    image: unit-image
    privileged: true
    params:
      RUNTIME: containerd
    file: ci/tasks/testflight/config.yml
    input_mapping:
      postgres-image: ((.:postgres-image))

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml

- name: integration
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: latest-concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: vault-image
      params: {format: oci}
    - get: ci
  - task: integration
    privileged: true
    image: unit-image
    file: ci/tasks/integration/config.yml
    input_mapping:
      concourse-image: latest-concourse-image

- name: k8s-check-helm-params
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: unit-image
    - get: concourse-chart
      trigger: true
    - get: linux-rc-ubuntu
      passed: [bin-smoke]
      trigger: true
    - get: ci
  - task: check-params
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-chart, linux-rc: linux-rc-ubuntu}
    params: {DISTRIBUTION: helm}

- name: k8s-topgun
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      trigger: true
      params: {format: oci}
    - get: unit-image
    - get: prometheus-chart
      params: {untar: true}
    - get: postgresql-chart
      params: {untar: true}
    - get: concourse-chart
      trigger: true
    - get: ci
  - across:
      - var: k8s_version
        max_in_flight: all
        values:
          # Only testing the second-latest release for now
          - "1.30"
    do:
    - do:
      - task: k8s-cluster-deploy
        file: ci/tasks/k8s-topgun/deploy.yml
        image: unit-image
        params:
          AWS_ACCESS_KEY_ID: ((s3.access_key))
          AWS_SECRET_ACCESS_KEY: ((s3.secret_key))
          LINODE_TOKEN: ((ci-tests.linode_token))
          WORKSPACE: main-((release_minor))
          TF_VAR_k8s_version: ((.:k8s_version))
      - task: k8s-topgun
        file: ci/tasks/k8s-topgun/config.yml
        image: unit-image
        params:
          CONCOURSE_IMAGE_NAME: concourse/concourse-rc
      ensure:
        task: k8s-cluster-cleanup
        file: ci/tasks/k8s-topgun/deploy.yml
        image: unit-image
        params:
          cleanup: true
          AWS_ACCESS_KEY_ID: ((s3.access_key))
          AWS_SECRET_ACCESS_KEY: ((s3.secret_key))
          LINODE_TOKEN: ((ci-tests.linode_token))
          WORKSPACE: main-((release_minor))
          TF_VAR_k8s_version: "1.30"

- name: rc
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed: [dev-image, testflight, watsjs, integration, worker-runtime]
      trigger: true
    - get: dev-image
      trigger: true
      passed: [dev-image]
    - get: unit-image
      passed: [dev-image]
      trigger: true
    - get: golang-builder-image
      passed: [dev-image]
  - put: version
    no_get: true
    inputs: detect
    params:
      pre: rc

- name: build-rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [rc]
      trigger: true
    - get: unit-image
      passed: [rc]
    - get: dev-image
      passed: [rc]
      trigger: true
    - get: golang-builder-image
      passed: [rc]
    - get: version
      passed: [rc]
      trigger: true
    - get: final-version
      resource: version
      passed: [rc]
      params: {bump: final}
    - get: ci
    - get: resource-types-image
      passed: [dev-image]
  - in_parallel:
    - task: fly-linux
      image: golang-builder-image
      file: ci/tasks/fly-build/config.yml
      output_mapping:
        fly: fly-linux
      params:
        GOOS: linux
    - task: fly-windows
      image: golang-builder-image
      file: ci/tasks/fly-build/config.yml
      output_mapping:
        fly: fly-windows
      params:
        GOOS: windows
    - task: fly-darwin
      image: golang-builder-image
      file: ci/tasks/fly-build/config.yml
      output_mapping:
        fly: fly-darwin
      params:
        GOOS: darwin
  - in_parallel:
      fail_fast: true
      steps:
        - task: hoist-linux-dependencies
          file: ci/tasks/hoist-linux-dependencies.yml
          image: dev-image
        - task: hoist-resource-types-ubuntu
          file: ci/tasks/hoist-linux-resource-types.yml
          image: resource-types-image
          output_mapping: {resource-types: resource-types-ubuntu}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
  - task: get-rc-version
    file: ci/tasks/get-rc-version.yml
    image: golang-builder-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-ubuntu
        image: golang-builder-image
        params:
          PLATFORM: linux
          VARIANT: ubuntu
        file: ci/tasks/concourse-build/config.yml
        input_mapping:
          concourse: built-concourse
          resource-types: resource-types-ubuntu
        output_mapping:
          concourse-tarball: concourse-linux-ubuntu
      - task: concourse-windows
        image: golang-builder-image
        params:
          PLATFORM: windows
        file: ci/tasks/concourse-build/config.yml
        input_mapping:
          concourse: built-concourse
        output_mapping:
          concourse-tarball: concourse-windows
      - task: concourse-darwin
        image: golang-builder-image
        params:
          PLATFORM: darwin
        file: ci/tasks/concourse-build/config.yml
        input_mapping:
          concourse: built-concourse
        output_mapping:
          concourse-tarball: concourse-darwin
  - in_parallel:
    - put: linux-rc-ubuntu
      no_get: true
      inputs: detect
      params:
        file: concourse-linux-ubuntu/concourse-*.tgz
    - put: windows-rc
      no_get: true
      inputs: detect
      params:
        file: concourse-windows/concourse-*.zip
    - put: darwin-rc
      no_get: true
      inputs: detect
      params:
        file: concourse-darwin/concourse-*.tgz

- name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      trigger: true
      passed: [build-rc]
    - get: concourse-docker
      trigger: true
    - get: builder
    - get: ci
    - get: trivy
  - task: build-ubuntu
    image: builder
    privileged: true
    file: concourse-docker/ci/build-image.yml
    input_mapping:
      linux-rc: linux-rc-ubuntu
    output_mapping:
      image: image-ubuntu
  - put: concourse-rc-image
    no_get: true
    inputs: detect
    params:
      image: image-ubuntu/image.tar
      additional_tags: version/version

- name: scan-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse-rc-image
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: concourse-rc-image-rootfs
      resource: concourse-rc-image
      passed: [build-rc-image]
      params: {format: rootfs}
      trigger: true
    - get: ci
    - get: trivy
      trigger: true
  - task: extract-trivy-db
    file: ci/tasks/extract-trivy-db.yml
    image: trivy
  - in_parallel:
      steps:
        - task: scan-ubuntu
          file: ci/tasks/scan-image.yml
          image: trivy
          input_mapping: {image: concourse-rc-image}
          params:
            IGNORE_POLICY_FILE: ci/trivy-ignore/((release_minor))-image.rego
        - task: scan-resource-types-ubuntu
          file: ci/tasks/scan-resource-types.yml
          image: trivy
          input_mapping: {image: concourse-rc-image-rootfs}
          params:
            IGNORE_POLICY_FILE: ci/trivy-ignore/((release_minor))-resource-types.rego

- name: bin-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: ci
  - load_var: concourse_version
    file: version/version
  - across:
    # We use to test both runtimes, but guardian is too heavy of a burden
    # for the OSS team to support at this time so we're only testing containerd
    - var: os-image
      values:
      - ubuntu-22.04
      - ubuntu-24.04
      max_in_flight: all
    timeout: 20m
    do:
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke/config.yml
      input_mapping:
        linux-rc: linux-rc-ubuntu
      params:
        AWS_ACCESS_KEY_ID: ((s3.access_key))
        AWS_SECRET_ACCESS_KEY: ((s3.secret_key))
        SSH_KEY: ((ci-tests.ssh_private_key))
        WORKSPACE: bin-smoke-((release_minor))-((.:os-image))
        TF_VAR_image: ((.:os-image))
        TF_VAR_runtime: containerd
        TF_VAR_hcloud_token: ((ci-tests.hcloud_token))
    - load_var: outputs
      file: outputs/outputs.json
    - task: smoke
      image: unit-image
      file: ci/tasks/watsjs-smoke/config.yml
      params:
        MAX_TICKS: 300
        ATC_URL: ((.:outputs.instance_url))
        ATC_ADMIN_PASSWORD: ((.:outputs.admin_password))
        ATC_GUEST_PASSWORD: ((.:outputs.guest_password))
      ensure:
        task: terraform-cleanup
        image: unit-image
        file: ci/tasks/terraform-smoke/config.yml
        params:
          cleanup: true
          AWS_ACCESS_KEY_ID: ((s3.access_key))
          AWS_SECRET_ACCESS_KEY: ((s3.secret_key))
          SSH_KEY: ((ci-tests.ssh_private_key))
          WORKSPACE: bin-smoke-((release_minor))-((.:os-image))
          TF_VAR_image: ((.:os-image))
          TF_VAR_runtime: containerd
          TF_VAR_hcloud_token: ((ci-tests.hcloud_token))

- name: bosh-check-props
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [bin-smoke]
      trigger: true
    - get: unit-image
    - get: version
      passed: [bin-smoke]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [bin-smoke]
      trigger: true
    - get: concourse-release-repo
      trigger: true
    - get: ci
  - task: check-props
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-release-repo, linux-rc: linux-rc-ubuntu}
    params: {DISTRIBUTION: bosh}

- name: bosh-bump
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: windows-rc
      passed: [build-rc]
      trigger: true
    - get: concourse-release-repo
    - get: ci
  - task: bump-concourse-blobs
    file: ci/tasks/bump-concourse-blobs/config.yml
    image: unit-image
    input_mapping:
      linux-rc: linux-rc-ubuntu
    params:
      access_key_id: ((s3.access_key))
      secret_access_key: ((s3.secret_key))
  - put: concourse-release-repo
    params:
      repository: bumped-concourse-release-repo

- name: bosh-upload-releases
  public: true
  serial: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
      passed: [bosh-bump]
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: ci
  - task: upload-releases
    tags: [bosh]
    file: ci/tasks/upload-releases.yml
    image: unit-image
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))


- name: create-draft-release
  public: true
  plan:
  - in_parallel:
    - get: release-me
    - get: ci
    - get: concourse
      passed:
      - build-rc
      - bosh-check-props
    - get: final-version
      resource: version
      params: {bump: final}
      passed:
      - build-rc
      - bosh-check-props
    - get: unit-image
      passed:
      - build-rc
    - get: linux-rc-ubuntu
      passed: [build-rc, build-rc-image, bosh-check-props]
    - get: windows-rc
      passed: [build-rc]
    - get: darwin-rc
      passed: [build-rc]
    - get: concourse-rc-image
      passed: [k8s-topgun, build-rc-image]
    - get: concourse-release
      params: {tarball: false}
    - get: bpm-release
    - get: postgres-release
  - task: extract-resource-type-versions
    image: unit-image
    file: ci/tasks/extract-resource-type-versions.yml
    input_mapping: {linux-rc: linux-rc-ubuntu}
  - in_parallel:
    - task: build-release-name
      image: unit-image
      file: ci/tasks/build-release-name.yml
      input_mapping: {version: final-version}
    - task: build-release-notes
      image: unit-image
      file: ci/tasks/build-release-notes.yml
      input_mapping:
        repo: concourse
        version: final-version
      params:
        GITHUB_OWNER: concourse
        GITHUB_REPO: concourse
        GITHUB_TOKEN: ((github/concourse/release_token))
        GITHUB_BRANCH: release/((release_minor)).x
  - put: concourse-draft-release
    no_get: true
    inputs: detect
    params:
      commitish: concourse/.git/ref
      tag: final-version/version
      tag_prefix: v
      name: release-name/release-name
      body: built-notes/notes.md

- name: shipit
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed: [create-draft-release]
    - get: unit-image
      passed: [create-draft-release]
    - get: final-version
      resource: version
      params: {bump: final}
      passed: [create-draft-release]
    - get: linux-rc-ubuntu
      passed: [create-draft-release]
    - get: windows-rc
      passed: [create-draft-release]
    - get: darwin-rc
      passed: [create-draft-release]
    - get: concourse-rc-image
      passed: [create-draft-release]
    - get: concourse-release
      passed: [create-draft-release]
      params: {tarball: false}
    - get: bpm-release
      passed: [create-draft-release]
    - get: postgres-release
      passed: [create-draft-release]
  - put: version
    no_get: true
    inputs: detect
    params:
      file: final-version/version

- name: discover-component-version
  public: true
  serial: true
  plan:
    - in_parallel:
      - get: ci
      - get: concourse
        passed: [shipit]
        trigger: true
      - get: unit-image
        passed: [shipit]
        trigger: true
      - get: version
        passed: [shipit]
    - in_parallel:
      - load_var: concourse-version
        file: version/version
    - in_parallel:
      - task: discover-postgresql-version
        file: ci/tasks/discover-component-version.yml
        output_mapping: {component-version: postgresql-version}
        params:
          COMPONENT_NAME: "postgresql"
          CONCOURSE_VERSION: ((.:concourse-version))
      - task: discover-helm-version
        file: ci/tasks/discover-component-version.yml
        output_mapping: {component-version: helm-version}
        params:
          COMPONENT_NAME: "helm"
          CONCOURSE_VERSION: ((.:concourse-version))
    - in_parallel:
      - put: resource-postgresql-version
        no_get: true
        inputs: detect
        params:
          file: "postgresql-version/postgresql-version-*.txt"
      - put: resource-helm-version
        no_get: true
        inputs: detect
        params:
          file: "helm-version/helm-version-*.txt"

- name: publish-binaries
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: unit-image
      passed: [shipit]
    - get: linux-rc-ubuntu
      passed: [shipit]
    - get: windows-rc
      passed: [shipit]
    - get: darwin-rc
      passed: [shipit]
    - get: ci
  - in_parallel:
    - task: prep-release-assets
      file: ci/tasks/prep-release-assets.yml
      image: unit-image
      input_mapping: {linux-rc: linux-rc-ubuntu}
    - task: build-release-name
      file: ci/tasks/build-release-name.yml
      image: unit-image
  - put: concourse-github-release
    no_get: true
    inputs: detect
    params:
      commitish: concourse/.git/ref
      tag: version/version
      tag_prefix: v
      name: release-name/release-name
      globs:
      - concourse-linux/concourse-*.tgz
      - concourse-windows/concourse-*.zip
      - concourse-darwin/concourse-*.tgz
      - fly-linux/fly-*.tgz
      - fly-windows/fly-*.zip
      - fly-darwin/fly-*.tgz
      - concourse-linux/*.sha1
      - concourse-windows/*.sha1
      - concourse-darwin/*.sha1
      - fly-linux/*.sha1
      - fly-windows/*.sha1
      - fly-darwin/*.sha1

- name: publish-bosh-release
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse-release
      passed: [shipit]
  - put: concourse-release-final
    no_get: true
    inputs: detect
    params:
      tarball: concourse-release/*.tgz
      version: version/version

- name: bump-cbd-versions
  serial: true
  plan:
  - in_parallel:
    - get: concourse-boshio
      trigger: true
    - get: unit-image
      passed: [shipit]
    - get: cbd
    - get: version
      passed: [shipit]
    - get: bpm-release
      passed: [shipit]
    - get: postgres-release
      passed: [shipit]
    - get: credhub-release
    - get: uaa-release
    - get: bbr-sdk-release
    - get: windows-utilities-release
  - task: bump-versions
    file: cbd/ci/bump-versions.yml
    input_mapping: {concourse-bosh-deployment: cbd}
    image: unit-image
  - put: cbd
    no_get: true
    inputs: detect
    params:
      repository: bumped-repo
      merge: true

- name: pin-resource-type-versions
  serial: true
  plan:
  - in_parallel:
    - get: linux-rc-ubuntu
      passed: [shipit]
      trigger: true
    - get: ci
  - task: extract-resource-type-versions
    file: ci/tasks/extract-resource-type-versions.yml
    input_mapping: {linux-rc: linux-rc-ubuntu}
  - task: pin-resource-type-versions
    file: ci/tasks/pin-resource-type-versions.yml
    params:
      RELEASE_MINOR: ((release_minor))
    output_mapping: {ci: bumped-ci}
  - put: ci
    no_get: true
    inputs: detect
    params:
      repository: bumped-ci

- name: publish-image
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse-rc-image
      passed: [shipit]
      params: {format: oci}
  - load_var: image_version
    file: version/version
  - put: concourse-image
    no_get: true
    inputs: detect
    params:
      image: concourse-rc-image/image.tar
      version: ((.:image_version))
      bump_aliases: true

- name: generate-dpkg-list
  plan:
  - in_parallel:
    - get: concourse-image
      passed: [publish-image]
      params: {format: rootfs}
      trigger: true
    - get: version
      passed: [publish-image]
      trigger: true
    - get: ci
  - task: generate-dpkg-list
    file: ci/tasks/generate-dpkg-list.yml
    image: concourse-image
    params: {COMPONENT_NAME: "concourse"}
  - put: concourse-image-dpkg-list
    no_get: true
    inputs: detect
    params:
      file: "dpkg-list/concourse-*.txt"

- name: patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    passed: [shipit]
    trigger: true
    params:
      bump: patch
      pre: rc
  - put: version
    no_get: true
    inputs: detect
    params:
      file: version/version

- name: rebuild-images
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: periodic-check
      trigger: true
    - get: unit-image
    - get: concourse
      passed: [shipit]
    - get: version
      passed: [shipit]
    - get: linux-rc-ubuntu
      passed: [shipit]
    - get: concourse-docker
    - get: builder
    - get: ci
    - get: trivy
    - get: postgres-image
      params: {format: oci}
  - load_var: image_version
    file: version/version
  - task: build-ubuntu
    file: concourse-docker/ci/build-image.yml
    image: builder
    input_mapping: {linux-rc: linux-rc-ubuntu}
    output_mapping: {image: image-ubuntu}
    privileged: true
    params:
      UNPACK_ROOTFS: true
  - in_parallel: # sanity checks
    - task: validate-binary-version-ubuntu
      image: image-ubuntu
      file: ci/tasks/validate-binary-version.yml
      params:
        EXPECTED_VERSION: ((.:image_version))
    - task: extract-trivy-db
      file: ci/tasks/extract-trivy-db.yml
      image: trivy
  - try:
      task: scan-image-ubuntu
      file: ci/tasks/scan-image.yml
      image: trivy
      input_mapping: {image: image-ubuntu}
      params:
        IGNORE_POLICY_FILE: ci/trivy-ignore/((release_minor))-image.rego
  - task: watsjs-smoke-ubuntu
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs-smoke.yml
    input_mapping: {dev-image: image-ubuntu}
  - task: ubuntu-date-tag
    image: unit-image
    file: ci/tasks/tag-version-with-date.yml
    params:
      VERSION: ((.:image_version))-ubuntu
  - put: concourse-image
    no_get: true
    inputs: detect
    params:
      image: image-ubuntu/image.tar
      version: ((.:image_version))
      bump_aliases: true
      additional_tags: date-tag/tag

resources:
- name: concourse
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse.git
    branch: release/((release_minor)).x
    private_key: ((github/concourse/concourse.private_key))
    ignore_paths:
    - release-notes/

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/ci.git
    branch: ((ci_branch))
    private_key: ((github/concourse/concourse.private_key))

- name: ci-pr-pipeline
  type: git
  icon: github
  source:
    uri: https://github.com/concourse/ci
    branch: ((ci_branch))
    private_key: ((github/concourse/concourse.private_key))
    paths:
    - pipelines/pr.yml

- name: concourse-docker
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse-docker.git
    branch: release/((release_minor)).x
    private_key: ((github/concourse/concourse.private_key))

- name: resource-types-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/resource-types
    tag: release-((release_minor))
    username: ((docker.username))
    password: ((docker.read_write))

- name: dev-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/dev
    username: ((docker.username))
    password: ((docker.read_write))
    tag: release-((release_minor))

- name: concourse-rc-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-rc
    username: ((docker.username))
    password: ((docker.read_write))
    tag: release-((release_minor))

- name: latest-concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    username: ((docker.username))
    password: ((docker.read_write))
    tag: ((latest_release))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    username: ((docker.username))
    password: ((docker.read_write))

- name: version
  type: semver
  icon: tag
  source:
    driver: s3
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    key: version-((release_minor))
    initial_version: ((release_minor)).0-rc.0

- name: linux-rc-ubuntu
  type: s3
  icon: linux
  source:
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    regexp: rcs/concourse-(.*)\.linux-ubuntu\.amd64\.tgz

- name: windows-rc
  type: s3
  icon: microsoft-windows
  source:
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    regexp: rcs/concourse-(.*)\.windows\.amd64\.zip

- name: darwin-rc
  type: s3
  icon: apple
  source:
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    regexp: rcs/concourse-(.*)\.darwin\.amd64\.tgz

- name: concourse-release
  type: bosh-release
  icon: *release-icon
  source:
    uri: https://github.com/concourse/concourse-bosh-release
    branch: release/((release_minor)).x
    dev_releases: true
    private_config: &release_private_config
      blobstore:
        provider: s3
        options:
          bucket_name: concourse-bosh
          access_key_id: ((s3.access_key))
          secret_access_key: ((s3.secret_key))
          host: ((s3.endpoint_url))

- name: concourse-release-final
  type: bosh-release
  icon: *release-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: master
    private_config: *release_private_config
    private_key: ((github/legacy_release_key))

- name: concourse-release-repo
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: release/((release_minor)).x
    private_key: ((github/legacy_release_key))

- name: concourse-chart
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-chart.git
    branch: release/((release_minor)).x
    private_key: ((github/concourse/concourse-chart.private_key))

- name: prometheus-chart
  type: helm-chart
  icon: &helm-icon ship-wheel
  source:
    chart: prometheus-community/prometheus
    repos:
      - name: prometheus-community
        url: https://prometheus-community.github.io/helm-charts

- name: postgresql-chart
  type: helm-chart
  icon: *helm-icon
  source:
    chart: bitnami/postgresql
    repos:
      - name: bitnami
        url: https://charts.bitnami.com/bitnami

- name: concourse-draft-release
  type: github-release
  icon: *release-icon
  source:
    drafts: true
    owner: concourse
    repository: concourse
    access_token: ((github/concourse/release_token))

- name: concourse-github-release
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: concourse
    access_token: ((github/concourse/release_token))

- name: concourse-boshio
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: concourse/concourse-bosh-release
    regexp: ^((release_minor)).*

- name: unit-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/unit
    username: ((docker.username))
    password: ((docker.public_read))

- name: golang-builder-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    variant: ((stemcell_name))
    username: ((docker.username))
    password: ((docker.read_write))

- name: builder
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/oci-build-task
    username: ((docker.username))
    password: ((docker.public_read))

- name: cbd
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-deployment.git
    branch: release/((release_minor)).x
    private_key: ((github/legacy_release_key))

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source:
    repository: postgres
    username: ((docker.username))
    password: ((docker.public_read))

- name: postgres-image-legacy
  type: registry-image
  icon: *image-icon
  source:
    repository: postgres
    tag: 11
    username: ((docker.username))
    password: ((docker.public_read))

- name: vault-image
  type: registry-image
  icon: *image-icon
  source:
    repository: hashicorp/vault
    username: ((docker.username))
    password: ((docker.public_read))

- name: dumb-init
  type: github-release
  icon: *release-icon
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((github/public_access_token))

- name: gdn
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    semver_constraint: ((dep_bin_versions.gdn))
    access_token: ((github/public_access_token))

- name: containerd
  type: github-release
  icon: *release-icon
  source:
    owner: containerd
    repository: containerd
    semver_constraint: ((dep_bin_versions.containerd))
    access_token: ((github/public_access_token))

- name: runc
  type: github-release
  icon: *release-icon
  source:
    owner: opencontainers
    repository: runc
    semver_constraint: ((dep_bin_versions.runc))
    access_token: ((github/public_access_token))

- name: cni
  type: github-release
  icon: *release-icon
  source:
    owner: containernetworking
    repository: plugins
    semver_constraint: ((dep_bin_versions.cni))
    access_token: ((github/public_access_token))

- name: postgres-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/postgres-release

- name: bpm-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/bpm-release

- name: credhub-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: pivotal-cf/credhub-release

- name: uaa-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/uaa-release

- name: bbr-sdk-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry-incubator/backup-and-restore-sdk-release

- name: windows-utilities-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry-incubator/windows-utilities-release

- name: mock-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/mock-resource
    semver_constraint: ((resource_type_versions.mock))
    username: ((docker.username))
    password: ((docker.public_read))

- name: bosh-io-release-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/bosh-io-release-resource
    semver_constraint: ((resource_type_versions.bosh-io-release))
    username: ((docker.username))
    password: ((docker.public_read))

- name: bosh-io-stemcell-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/bosh-io-stemcell-resource
    semver_constraint: ((resource_type_versions.bosh-io-stemcell))
    username: ((docker.username))
    password: ((docker.public_read))

- name: docker-image-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/docker-image-resource
    semver_constraint: ((resource_type_versions.docker-image))
    username: ((docker.username))
    password: ((docker.public_read))

- name: git-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/git-resource
    semver_constraint: ((resource_type_versions.git))
    username: ((docker.username))
    password: ((docker.public_read))

- name: github-release-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/github-release-resource
    semver_constraint: ((resource_type_versions.github-release))
    username: ((docker.username))
    password: ((docker.public_read))

- name: hg-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/hg-resource
    semver_constraint: ((resource_type_versions.hg))
    username: ((docker.username))
    password: ((docker.public_read))

- name: pool-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/pool-resource
    semver_constraint: ((resource_type_versions.pool))
    username: ((docker.username))
    password: ((docker.public_read))

- name: registry-image-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/registry-image-resource
    semver_constraint: ((resource_type_versions.registry-image))
    username: ((docker.username))
    password: ((docker.public_read))

- name: s3-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/s3-resource
    semver_constraint: ((resource_type_versions.s3))
    username: ((docker.username))
    password: ((docker.public_read))

- name: semver-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/semver-resource
    semver_constraint: ((resource_type_versions.semver))
    username: ((docker.username))
    password: ((docker.public_read))

- name: time-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/time-resource
    semver_constraint: ((resource_type_versions.time))
    username: ((docker.username))
    password: ((docker.public_read))

- name: tracker-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/tracker-resource
    semver_constraint: ((resource_type_versions.tracker))
    username: ((docker.username))
    password: ((docker.public_read))

- name: busybox
  type: registry-image
  icon: *release-icon
  check_every: 24h
  source:
    repository: busybox
    tag: latest
    username: ((docker.username))
    password: ((docker.public_read))

- name: concourse-image-dpkg-list
  type: s3
  icon: format-list-bulleted
  source:
    bucket: concourse-components-version
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    regexp: "concourse-dpkg-list-(.*).txt"

- name: resource-postgresql-version
  type: s3
  icon: format-list-bulleted
  source:
    bucket: concourse-components-version
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    regexp: "postgresql-version-(.*).txt"

- name: resource-helm-version
  type: s3
  icon: format-list-bulleted
  source:
    bucket: concourse-components-version
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    endpoint: ((s3.endpoint_url))
    regexp: "helm-version-(.*).txt"

- name: periodic-check
  icon: clock
  type: time
  source:
    interval: 24h

- name: release-me
  type: github-release
  source:
    owner: clarafu
    repository: release-me
    access_token: ((github/public_access_token))

- name: trivy
  type: registry-image
  source:
    repository: aquasec/trivy
    username: ((docker.username))
    password: ((docker.public_read))

- name: concourse-prs
  type: pull-request
  check_every: 2m
  source:
    repository: concourse/concourse
    access_token: ((pull_requests_access_token))
    base_branch: release/((release_minor)).x
