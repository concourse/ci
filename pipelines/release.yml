# the following vars must be specified:
#
#   ((release_major))                   the MAJOR version, e.g. 6
#   ((release_minor))                   the MAJOR.MINOR version, e.g. 6.1
#                                       concourse matches the desired release version
#   ((concourse_smoke_deployment_name)) a unique name for the smoke bosh deployment
#   ((latest_release))                  the latest concourse/concourse tag for upgrade testing.
#                                       e.g. 6.6.x -> 6.5, 7.0.x -> 6.7
#   ((has_runtime_flag))                whether the CONCOURSE_RUNTIME flag is supported by this version (determines how to deploy containerd-backed workers)
#   ((slack_hook))                      the slack hook to use for sending the notification (one slack hook per channel)
#                                       concourse-private hook for LTS versions, and concourse-interrupt hook for OSS-only ones
#
# the following git branches need to be created:
#
#   concourse/concourse                 release/((release_minor)).x
#   concourse/concourse-bosh-release    release/((release_minor)).x
#   concourse/concourse-bosh-deployment release/((release_minor)).x
#   concourse/concourse-chart           release/((release_minor)).x
#
# everything else will be managed by the pipeline

resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

- name: bosh-release
  type: registry-image
  source: {repository: dpb587/bosh-release-resource}

- name: bosh-deployment
  type: registry-image
  source: {repository: cloudfoundry/bosh-deployment-resource}

- name: slack-notifier
  type: registry-image
  source: {repository: mockersf/concourse-slack-notifier}

groups:
- name: develop
  jobs:
  - unit
  - resource-types-images
  - dev-image
  - testflight
  - containerd-integration
  - watsjs
  - rc
  - build-rc
  - build-rc-image
  - bin-smoke
  - bin-smoke-lts
  - upgrade
  - downgrade

- name: k8s
  jobs:
  - k8s-check-helm-params
  - k8s-smoke
  - k8s-topgun

- name: bosh
  jobs:
  - bosh-bump
  - bosh-smoke
  - bosh-topgun
  - bosh-check-props

- name: publish
  jobs:
  - create-draft-release
  - shipit
  - publish-binaries
  - publish-image
  - publish-bosh-release
  - bump-cbd-versions
  - patch
  - discover-component-version

jobs:
- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: periodic-check
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
      timeout: 1h
    - task: fly-darwin
      file: ci/tasks/fly-darwin.yml
      timeout: 1h
    - task: fly-windows
      file: ci/tasks/fly-windows.yml
      timeout: 1h
  on_failure: &failed-concourse
    put: notify
    params:
      mode: normal
      alert_type: failed
  on_error: *failed-concourse

- name: resource-types-images
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: bosh-io-release-resource
      trigger: true
    - get: bosh-io-stemcell-resource
      trigger: true
    - get: cf-resource
      trigger: true
    - get: docker-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: github-release-resource
      trigger: true
    - get: hg-resource
      trigger: true
    - get: pool-resource
      trigger: true
    - get: registry-image-resource
      trigger: true
    - get: s3-resource
      trigger: true
    - get: semver-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: tracker-resource
      trigger: true
    - get: mock-resource
      trigger: true
    - get: builder
      trigger: true
    - get: periodic-check
      trigger: true
    - get: ci
  - in_parallel:
    - task: build-alpine
      image: builder
      privileged: true
      params:
        BUILD_ARG_distro: alpine
      file: ci/tasks/build-resource-types-image.yml
    - task: build-ubuntu
      output_mapping: {image: image_ubuntu}
      image: builder
      privileged: true
      params:
        BUILD_ARG_distro: ubuntu
      file: ci/tasks/build-resource-types-image.yml
  - in_parallel:
    - put: resource-types-alpine-image
      params: {image: image/image.tar}
      get_params: {format: oci}
    - put: resource-types-ubuntu-image
      params: {image: image_ubuntu/image.tar}
      get_params: {format: oci}

- name: dev-image
  public: true
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: concourse
        trigger: true
      - get: unit-image
        trigger: true
      - get: gdn
        trigger: true
      - get: containerd
        trigger: true
      - get: runc
        trigger: true
      - get: cni
        trigger: true
      - get: dumb-init
        trigger: true
      - get: resource-types-alpine-image
        passed: [resource-types-images]
        trigger: true
      - get: resource-types-ubuntu-image
        passed: [resource-types-images]
        trigger: true
      - get: builder
      - get: ci
  - in_parallel:
      fail_fast: true
      steps:
      - task: yarn-build
        image: unit-image
        file: ci/tasks/yarn-build.yml
      - task: fly-linux
        file: ci/tasks/fly-build-linux.yml
        image: unit-image
      - task: fly-windows
        file: ci/tasks/fly-build-windows.yml
      - task: fly-darwin
        file: ci/tasks/fly-build-darwin.yml
  - task: build
    image: builder
    privileged: true
    input_mapping: {concourse: built-concourse, resource-types-image: resource-types-alpine-image}
    params:
      DOCKERFILE: ci/dockerfiles/dev/Dockerfile
    file: ci/tasks/build-dev-image.yml
  - put: dev-image
    params: {image: image/image.tar}
    get_params: {format: oci}
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: containerd-integration
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      trigger: true
    - get: ci
  - task: integration
    image: dev-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration.yml
  on_failure: *failed-concourse

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    task: testflight
    image: unit-image
    privileged: true
    timeout: 1h
    params:
      RUNTIME: ((.:runtime))
      HAS_RUNTIME_FLAG: ((has_runtime_flag))
    file: ci/tasks/docker-compose-testflight.yml
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: upgrade
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: latest-concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: upgrade-test
    privileged: true
    image: unit-image
    file: ci/tasks/upgrade-test.yml
    input_mapping:
      concourse-image: latest-concourse-image
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: downgrade
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: latest-concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: downgrade-test
    privileged: true
    image: unit-image
    file: ci/tasks/downgrade-test.yml
    input_mapping:
      concourse-image: latest-concourse-image

- name: k8s-check-helm-params
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image-ubuntu
      passed: [build-rc-image]
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: unit-image
    - get: concourse-chart
      trigger: true
    - get: linux-rc-ubuntu
      passed: [bin-smoke]
      trigger: true
    - get: ci
  - task: check-params
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-chart, linux-rc: linux-rc-ubuntu}
    params: {DISTRIBUTION: helm}
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: k8s-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: concourse-rc-image-ubuntu
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: concourse-chart
    - get: unit-image
      passed: [build-rc-image]
    - get: ci
  - try:
      task: try-delete
      image: unit-image
      file: ci/tasks/k8s-delete.yml
      params:
        KUBE_CONFIG: ((kube_config))
        RELEASE_NAME: ((concourse_smoke_deployment_name))
        CONCOURSE_IMAGE: concourse/concourse-rc
  - task: deploy
    image: unit-image
    input_mapping: {image-info: concourse-rc-image}
    file: ci/tasks/k8s-deploy.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: ((concourse_smoke_deployment_name))
      CONCOURSE_IMAGE: concourse/concourse-rc
  - task: k8s-smoke
    image: unit-image
    file: ci/tasks/k8s-smoke.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: ((concourse_smoke_deployment_name))
      MAX_TICKS: 180
  - task: delete
    image: unit-image
    file: ci/tasks/k8s-delete.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: ((concourse_smoke_deployment_name))
      CONCOURSE_IMAGE: concourse/concourse-rc
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: k8s-topgun
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [k8s-smoke]
      trigger: true
      tags: [k8s-topgun]
    - get: version
      passed: [k8s-smoke]
      trigger: true
      tags: [k8s-topgun]
    - get: concourse-rc-image
      passed: [k8s-smoke]
      trigger: true
      params: {format: oci}
      tags: [k8s-topgun]
    - get: concourse-rc-image-ubuntu
      passed: [k8s-smoke]
      trigger: true
      params: {format: oci}
      tags: [k8s-topgun]
    - get: unit-image
      tags: [k8s-topgun]
    - get: helm-charts
      tags: [k8s-topgun]
    - get: concourse-chart
      trigger: true
      passed: [k8s-smoke]
      tags: [k8s-topgun]
    - get: ci
      tags: [k8s-topgun]
  - task: k8s-topgun
    file: ci/tasks/k8s-topgun.yml
    image: unit-image
    tags: [k8s-topgun]
    params:
      IN_CLUSTER: "true"
      KUBE_CONFIG: ((kube_config))
      CONCOURSE_IMAGE_NAME: concourse/concourse-rc
      HELM_VERSION: ((helm_version))
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: rc
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed: [testflight, watsjs, upgrade, downgrade]
      trigger: true
    - get: dev-image
      trigger: true
      passed: [testflight, watsjs, upgrade, downgrade]
    - get: unit-image
      passed: [testflight, watsjs, upgrade, downgrade]
      trigger: true
  - put: version
    params: {pre: rc}

- name: build-rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [rc]
      trigger: true
    - get: unit-image
      passed: [rc]
    - get: dev-image
      passed: [rc]
      trigger: true
    - get: version
      passed: [rc]
      trigger: true
    - get: final-version
      resource: version
      passed: [rc]
      params: {bump: final}
    - get: ci
    - get: resource-types-alpine-image
      passed: [dev-image]
    - get: resource-types-ubuntu-image
      passed: [dev-image]
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
    - task: fly-windows
      file: ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: ci/tasks/fly-build-darwin.yml
  - in_parallel:
      fail_fast: true
      steps:
        - task: hoist-linux-dependencies
          file: ci/tasks/hoist-linux-dependencies.yml
          image: dev-image
        - task: hoist-resource-types-alpine
          file: ci/tasks/hoist-linux-resource-types.yml
          image: resource-types-alpine-image
          output_mapping: {resource-types: resource-types-alpine}
        - task: hoist-resource-types-ubuntu
          file: ci/tasks/hoist-linux-resource-types.yml
          image: resource-types-ubuntu-image
          output_mapping: {resource-types: resource-types-ubuntu}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-alpine
        file: ci/tasks/concourse-build-linux.yml
        image: unit-image
        input_mapping: {concourse: built-concourse, resource-types: resource-types-alpine}
        output_mapping: {concourse-tarball: concourse-linux-alpine}
        params: {PLATFORM: linux}
      - task: concourse-linux-alpine-arm64
        file: ci/tasks/concourse-build-linux.yml
        image: unit-image
        input_mapping: {concourse: built-concourse, resource-types: resource-types-alpine}
        output_mapping: {concourse-tarball: concourse-linux-alpine-arm64}
        params:
          - PLATFORM: linux
          - GOARCH: arm64
      - task: concourse-linux-ubuntu
        image: unit-image
        file: ci/tasks/concourse-build-linux.yml
        input_mapping: {concourse: built-concourse, resource-types: resource-types-ubuntu}
        output_mapping: {concourse-tarball: concourse-linux-ubuntu}
        params: {PLATFORM: linux-ubuntu}
      - task: concourse-windows
        file: ci/tasks/concourse-build-windows.yml
        input_mapping: {concourse: built-concourse}
      - task: concourse-darwin
        file: ci/tasks/concourse-build-darwin.yml
        output_mapping: {concourse-tarball: concourse-darwin}
  - in_parallel:
    - put: linux-rc
      params: {file: concourse-linux-alpine/concourse-*.tgz}
      inputs: [concourse-linux-alpine]
    - put: linux-rc-arm64
      params: {file: concourse-linux-alpine-arm64/concourse-*arm64.tgz}
      inputs: [concourse-linux-alpine-arm64]
    - put: linux-rc-ubuntu
      params: {file: concourse-linux-ubuntu/concourse-*.tgz}
      inputs: [concourse-linux-ubuntu]
    - put: windows-rc
      params: {file: concourse-windows/concourse-*.zip}
      inputs: [concourse-windows]
    - put: darwin-rc
      params: {file: concourse-darwin/concourse-*.tgz}
      inputs: [concourse-darwin]
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc
      trigger: true
      passed: [build-rc]
    - get: linux-rc-ubuntu
      trigger: true
      passed: [build-rc]
    - get: concourse-docker
      trigger: true
    - get: builder
    - get: ci
  - in_parallel:
      fail_fast: true
      steps:
        - task: build-alpine
          file: concourse-docker/ci/build-image.yml
          image: builder
          output_mapping: {image: image-alpine}
          privileged: true
        - task: build-ubuntu
          file: concourse-docker/ci/build-image.yml
          image: builder
          input_mapping: {linux-rc: linux-rc-ubuntu}
          output_mapping: {image: image-ubuntu}
          privileged: true
  - in_parallel:
      fail_fast: true
      steps:
        - put: concourse-rc-image
          inputs: [image-alpine, version]
          params:
            image: image-alpine/image.tar
            additional_tags: version/version
        - put: concourse-rc-image-ubuntu
          inputs: [image-ubuntu, version]
          params:
            image: image-ubuntu/image.tar
            additional_tags: version/version
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: bin-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: ci
  - load_var: concourse_version
    file: version/version
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: 1
    do:
      - task: terraform-smoke
        image: unit-image
        file: ci/tasks/terraform-smoke.yml
        input_mapping: {linux-rc: linux-rc-ubuntu}
        params:
          GCP_PROJECT: cf-concourse-production
          GCP_KEY: ((concourse_smoke_gcp_key))
          SSH_KEY: ((concourse_smoke_ssh_key))
          WORKSPACE: release-((release_minor))
          CONCOURSE_VERSION: ((.:concourse_version))
          TF_VAR_RUNTIME: ((.:runtime))
          TF_VAR_HAS_RUNTIME_FLAG: ((has_runtime_flag))
      - task: smoke
        image: unit-image
        file: ci/tasks/smoke.yml
        input_mapping: {endpoint-info: outputs}
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: bin-smoke-lts
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: ci
  - load_var: concourse_version
    file: version/version
  - across:
    - var: gcp-image
      values:
      - ubuntu-1604-lts
      - ubuntu-1804-lts
      - ubuntu-2004-lts
      max_in_flight: 1
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: 1
    fail_fast: true
    do:
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke.yml
      input_mapping: {linux-rc: linux-rc-ubuntu}
      params:
        GCP_PROJECT: cf-concourse-production
        GCP_KEY: ((concourse_smoke_gcp_key))
        SSH_KEY: ((concourse_smoke_ssh_key))
        WORKSPACE: release-((release_minor))-lts
        CONCOURSE_VERSION: ((.:concourse_version))
        TF_VAR_GCP_IMAGE: ((.:gcp-image))
        TF_VAR_RUNTIME: ((.:runtime))
        TF_VAR_HAS_RUNTIME_FLAG: ((has_runtime_flag))
    - task: smoke
      image: unit-image
      file: ci/tasks/smoke.yml
      input_mapping: {endpoint-info: outputs}
    timeout: 20m
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: bosh-check-props
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [bin-smoke]
      trigger: true
    - get: unit-image
    - get: version
      passed: [bin-smoke]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [bin-smoke]
      trigger: true
    - get: concourse-release-repo
      trigger: true
    - get: ci
  - task: check-props
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-release-repo, linux-rc: linux-rc-ubuntu}
    params: {DISTRIBUTION: bosh}
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: bosh-bump
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: windows-rc
      passed: [build-rc]
      trigger: true
    - get: concourse-release-repo
    - get: ci
  - task: bump-concourse-blobs
    file: ci/tasks/bump-concourse-blobs.yml
    image: unit-image
    input_mapping: { linux-rc: linux-rc-ubuntu }
    params: {GCP_JSON_KEY: ((concourse_artifacts_json_key))}
  - put: concourse-release-repo
    params: {repository: bumped-concourse-release-repo}

- name: bosh-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
      passed: [bosh-bump]
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: ci
  - put: smoke-deployment
    tags: [bosh]
    params:
      manifest: ci/deployments/bosh-smoke.yml
      releases:
      - concourse-release/*.tgz
      - postgres-release/*.tgz
      - bpm-release/*.tgz
      stemcells:
      - gcp-xenial-stemcell/*.tgz
      vars:
        deployment_name: ((concourse_smoke_deployment_name))
  - task: discover-bosh-endpoint-info
    tags: [bosh]
    file: ci/tasks/discover-bosh-endpoint-info.yml
    image: unit-image
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      BOSH_DEPLOYMENT: ((concourse_smoke_deployment_name))
      BOSH_INSTANCE_GROUP: concourse
  - task: smoke
    tags: [bosh]
    image: unit-image
    file: ci/tasks/smoke.yml
    timeout: 1h
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: bosh-topgun
  public: true
  serial: true
  interruptible: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
      passed: [bosh-bump]
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: bbr-sdk-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: vault-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: bbr
      trigger: true
    - get: ci
  - task: bosh-topgun
    tags: [bosh]
    file: ci/tasks/topgun.yml
    image: unit-image
    input_mapping:
      stemcell: gcp-xenial-stemcell
    params:
      DEPLOYMENT_NAME_PREFIX: concourse-topgun-((release_minor))
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      AWS_REGION: ((topgun_aws_ssm.region))
      AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
      SKIP_PACKAGES: "k8s"
      RELEASE_NAME_SUFFIX: ((release_minor))
  on_failure: *failed-concourse
  on_error: *failed-concourse

- name: create-draft-release
  public: true
  plan:
  - in_parallel:
    - get: release-me
    - get: ci
    - get: concourse
      passed:
      - build-rc
      - bosh-smoke
      - bosh-topgun
      - bosh-check-props
    - get: final-version
      resource: version
      params: {bump: final}
      passed:
      - build-rc
      - bosh-smoke
      - bosh-topgun
      - bosh-check-props
    - get: unit-image
      passed:
      - build-rc
      - bosh-smoke
      - bosh-topgun
    - get: linux-rc
      passed: [build-rc]
    - get: linux-rc-arm64
      passed: [build-rc]
    - get: linux-rc-ubuntu
      passed: [build-rc, bosh-check-props]
    - get: windows-rc
      passed: [build-rc]
    - get: darwin-rc
      passed: [build-rc]
    - get: concourse-rc-image
      passed: [k8s-smoke]
    - get: concourse-rc-image-ubuntu
    - get: concourse-release
      passed: [bosh-smoke, bosh-topgun]
      params: {tarball: false}
    - get: bpm-release
      passed: [bosh-smoke, bosh-topgun]
    - get: postgres-release
      passed: [bosh-smoke, bosh-topgun]
    - get: credhub-release
      passed: [bosh-topgun]
    - get: uaa-release
      passed: [bosh-topgun]
  - in_parallel:
    - task: build-release-name
      file: ci/tasks/build-release-name.yml
      input_mapping: {version: final-version}
    - task: build-release-notes
      file: ci/tasks/build-release-notes.yml
      input_mapping:
        repo: concourse
        version: final-version
      params:
        GITHUB_OWNER: concourse
        GITHUB_REPO: concourse
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
        GITHUB_BRANCH: release/((release_minor)).x
  - put: concourse-draft-release
    inputs: [concourse, final-version, release-name, built-notes]
    params:
      commitish: concourse/.git/ref
      tag: final-version/version
      tag_prefix: v
      name: release-name/release-name
      body: built-notes/notes.md


- name: shipit
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed: [create-draft-release]
    - get: unit-image
      passed: [create-draft-release]
    - get: final-version
      resource: version
      params: {bump: final}
      passed: [create-draft-release]
    - get: linux-rc
      passed: [create-draft-release]
    - get: linux-rc-arm64
      passed: [create-draft-release]
    - get: linux-rc-ubuntu
      passed: [create-draft-release]
    - get: windows-rc
      passed: [create-draft-release]
    - get: darwin-rc
      passed: [create-draft-release]
    - get: concourse-rc-image
      passed: [create-draft-release]
    - get: concourse-rc-image-ubuntu
      passed: [create-draft-release]
    - get: concourse-release
      passed: [create-draft-release]
      params: {tarball: false}
    - get: bpm-release
      passed: [create-draft-release]
    - get: postgres-release
      passed: [create-draft-release]
    - get: credhub-release
      passed: [create-draft-release]
    - get: uaa-release
      passed: [create-draft-release]
  - put: version
    params: {file: final-version/version}

- name: discover-component-version
  public: true
  serial: true
  plan:
    - in_parallel:
      - get: ci
      - get: concourse
        passed: [shipit]
        trigger: true
      - get: unit-image
        passed: [shipit]
        trigger: true
      - get: version
        passed: [shipit]
    - task: discover-postgresql-version
      file: ci/tasks/discover-component-version.yml
      output_mapping: {component-version: postgresql-version}
      params: {COMPONENT_NAME: "postgresql"}
    - task: discover-helm-version
      file: ci/tasks/discover-component-version.yml
      output_mapping: {component-version: helm-version}
      params: {COMPONENT_NAME: "helm"}
    - put: resource-postgresql-version
      inputs: [postgresql-version]
      params: {file: "postgresql-version/postgresql-version-*.txt"}
    - put: resource-helm-version
      inputs: [helm-version]
      params: {file: "helm-version/helm-version-*.txt"}

- name: publish-binaries
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: unit-image
      passed: [shipit]
    - get: linux-rc
      passed: [shipit]
    - get: linux-rc-arm64
      passed: [shipit]
    - get: windows-rc
      passed: [shipit]
    - get: darwin-rc
      passed: [shipit]
    - get: ci
  - in_parallel:
    - task: prep-release-assets
      file: ci/tasks/prep-release-assets.yml
      image: unit-image
    - task: build-release-name
      file: ci/tasks/build-release-name.yml
      image: unit-image
  - put: concourse-github-release
    params:
      commitish: concourse/.git/ref
      tag: version/version
      tag_prefix: v
      name: release-name/release-name
      globs:
      - concourse-linux/concourse-*.tgz
      - concourse-windows/concourse-*.zip
      - concourse-darwin/concourse-*.tgz
      - fly-linux/fly-*.tgz
      - fly-windows/fly-*.zip
      - fly-darwin/fly-*.tgz
      - concourse-linux/*.sha1
      - concourse-windows/*.sha1
      - concourse-darwin/*.sha1
      - fly-linux/*.sha1
      - fly-windows/*.sha1
      - fly-darwin/*.sha1

- name: publish-bosh-release
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse-release
      passed: [shipit]
  - put: concourse-release-final
    params:
      tarball: concourse-release/*.tgz
      version: version/version

- name: bump-cbd-versions
  serial: true
  plan:
  - in_parallel:
    - get: concourse-boshio
      trigger: true
    - get: unit-image
      passed: [shipit]
    - get: cbd
    - get: version
      passed: [shipit]
    - get: bpm-release
      passed: [shipit]
    - get: postgres-release
      passed: [shipit]
    - get: credhub-release
      passed: [shipit]
    - get: uaa-release
      passed: [shipit]
  - task: bump-versions
    file: cbd/ci/bump-versions.yml
    input_mapping: {concourse-bosh-deployment: cbd}
    image: unit-image
  - put: cbd
    params:
      repository: bumped-repo
      merge: true

- name: publish-image
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: concourse-rc-image
      passed: [shipit]
      params: {format: oci}
    - get: concourse-rc-image-ubuntu
      passed: [shipit]
      params: {format: oci}
    - get: concourse-rc-image-ubuntu-rootfs
      resource: concourse-rc-image-ubuntu
      passed: [shipit]
    - get: latest-version
    - get: latest-of-same-major-version
    - get: ci
  - in_parallel:
    - do:
      - task: docker-semver-tags
        file: ci/tasks/docker-semver-tags.yml
        output_mapping: {tags: alpine-tags}

      - put: concourse-image
        inputs: [concourse-rc-image, alpine-tags]
        params:
          image: concourse-rc-image/image.tar
          additional_tags: alpine-tags/tags

    - do:
      - task: docker-semver-tags
        file: ci/tasks/docker-semver-tags.yml
        output_mapping: {tags: ubuntu-tags}
        params: {SUFFIX: ubuntu}

      - task: generate-dpkg-list
        file: ci/tasks/generate-dpkg-list.yml
        image: concourse-rc-image-ubuntu-rootfs
        params: {COMPONENT_NAME: "concourse"}

      - put: concourse-image-dpkg-list
        inputs: [dpkg-list]
        params: {file: "dpkg-list/concourse-*.txt"}

      - put: concourse-image-ubuntu
        inputs: [concourse-rc-image-ubuntu, ubuntu-tags]
        params:
          image: concourse-rc-image-ubuntu/image.tar
          additional_tags: ubuntu-tags/tags

- name: patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    passed: [shipit]
    trigger: true
    params:
      bump: patch
      pre: rc
  - put: version
    params:
      file: version/version

resources:
- name: concourse
  type: git
  icon: &git-icon github
  source:
    uri: https://github.com/concourse/concourse.git
    branch: release/((release_minor)).x
    ignore_paths:
    - release-notes/

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: concourse-docker
  type: git
  icon: &git-icon github
  source:
    uri: https://github.com/concourse/concourse-docker.git
    branch: master

- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_hook))
    username: ((basic_auth.username))
    password: ((basic_auth.password))
    concourse_url: https://ci.concourse-ci.org

- name: resource-types-alpine-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    tag: release-((release_minor))
    username: ((docker.username))
    password: ((docker.password))


- name: resource-types-ubuntu-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    tag: release-((release_minor))-ubuntu
    username: ((docker.username))
    password: ((docker.password))

- name: dev-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/dev
    username: ((docker.username))
    password: ((docker.password))
    tag: release-((release_minor))

- name: concourse-rc-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-rc
    username: ((docker.username))
    password: ((docker.password))
    tag: release-((release_minor))

- name: concourse-rc-image-ubuntu
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-rc
    username: ((docker.username))
    password: ((docker.password))
    tag: release-((release_minor))-ubuntu

- name: latest-concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    username: ((docker.username))
    password: ((docker.password))
    tag: ((latest_release))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    username: ((docker.username))
    password: ((docker.password))

    # avoid tagging as 'latest' in case this is a patch release for an older
    # version
    tag: ((release_minor))

- name: concourse-image-ubuntu
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    username: ((docker.username))
    password: ((docker.password))

    # avoid tagging as 'latest' in case this is a patch release for an older
    # version
    tag: ((release_minor))-ubuntu

- name: version
  type: semver
  icon: tag
  source:
    driver: gcs
    json_key: ((concourse_artifacts_json_key))

    bucket: concourse-artifacts
    key: version-((release_minor))
    initial_version: ((release_minor)).0-rc.0

- name: latest-version
  type: github-release
  icon: &release-icon package-variant-closed
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: latest-of-same-major-version
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))
    tag_filter: '^v(((release_major))\.\d+\.\d+)$'

- name: linux-rc
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-linux-amd64.tgz

- name: linux-rc-arm64
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-linux-arm64.tgz

- name: linux-rc-ubuntu
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-linux-ubuntu-amd64.tgz

- name: windows-rc
  type: gcs
  icon: microsoft-windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-windows-amd64.zip

- name: darwin-rc
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-darwin-amd64.tgz

- name: concourse-release
  type: bosh-release
  icon: *release-icon
  source:
    uri: https://github.com/concourse/concourse-bosh-release
    branch: release/((release_minor)).x
    dev_releases: true
    private_config: &release_private_config
      blobstore:
        provider: gcs
        options:
          credentials_source: static
          json_key: ((concourse_artifacts_json_key))

- name: concourse-release-final
  type: bosh-release
  icon: *release-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: master
    private_config: *release_private_config
    private_key: ((concourse_release_deploy_key))

- name: concourse-release-repo
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: release/((release_minor)).x
    private_key: ((concourse_release_deploy_key))

- name: smoke-deployment
  tags: [bosh]
  type: bosh-deployment
  icon: fire
  source:
    target: https://10.0.0.6:25555
    client: ((testing_bosh_client.id))
    client_secret: ((testing_bosh_client.secret))
    ca_cert: ((testing_bosh_ca_cert))
    deployment: ((concourse_smoke_deployment_name))

- name: concourse-chart
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-chart.git
    branch: release/((release_minor)).x
    private_key: ((concourse_chart_private_key))

- name: helm-charts
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/helm/charts
    branch: master

- name: concourse-draft-release
  type: github-release
  icon: *release-icon
  source:
    drafts: true
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: concourse-github-release
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: concourse-boshio
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: concourse/concourse-bosh-release
    regexp: ((release_minor)).*

- name: unit-image
  type: registry-image
  icon: *image-icon
  source: {repository: concourse/unit}

- name: builder
  type: registry-image
  icon: *image-icon
  source: {repository: vito/oci-build-task}

- name: gcp-xenial-stemcell
  type: bosh-io-stemcell
  icon: *release-icon
  source: {name: bosh-google-kvm-ubuntu-xenial-go_agent}

- name: cbd
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-deployment.git
    branch: release/((release_minor)).x
    private_key: ((concourse_deployment_repo_private_key))

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source: {repository: postgres}

- name: dumb-init
  type: github-release
  icon: *release-icon
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((concourse_github_dummy.access_token))

- name: bbr
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((concourse_github_dummy.access_token))

- name: gdn
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((concourse_github_dummy.access_token))

- name: containerd
  type: github-release
  icon: *release-icon
  source:
    owner: containerd
    repository: containerd
    access_token: ((concourse_github_dummy.access_token))

- name: runc
  type: github-release
  icon: *release-icon
  source:
    owner: opencontainers
    repository: runc
    access_token: ((concourse_github_dummy.access_token))

- name: cni
  type: github-release
  icon: *release-icon
  source:
    owner: containernetworking
    repository: plugins
    access_token: ((concourse_github_dummy.access_token))

- name: postgres-release
  type: bosh-io-release
  icon: *release-icon
  source: {repository: cloudfoundry/postgres-release}

- name: bpm-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/bpm-release

- name: vault-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: vito/vault-boshrelease

- name: credhub-release
  type: bosh-io-release
  icon: *release-icon
  source: {repository: pivotal-cf/credhub-release}

- name: uaa-release
  type: bosh-io-release
  icon: *release-icon
  source: {repository: cloudfoundry/uaa-release}

- name: bbr-sdk-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry-incubator/backup-and-restore-sdk-release

- name: mock-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: mock-resource
    access_token: ((concourse_github_dummy.access_token))

- name: bosh-io-release-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: bosh-io-release-resource
    access_token: ((concourse_github_dummy.access_token))

- name: bosh-io-stemcell-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: bosh-io-stemcell-resource
    access_token: ((concourse_github_dummy.access_token))

- name: cf-resource
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry-community
    repository: cf-resource
    access_token: ((concourse_github_dummy.access_token))

- name: docker-image-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: docker-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: git-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: git-resource
    access_token: ((concourse_github_dummy.access_token))

- name: github-release-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: github-release-resource
    access_token: ((concourse_github_dummy.access_token))

- name: hg-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: hg-resource
    access_token: ((concourse_github_dummy.access_token))

- name: pool-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: pool-resource
    access_token: ((concourse_github_dummy.access_token))

- name: registry-image-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: registry-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: s3-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: s3-resource
    access_token: ((concourse_github_dummy.access_token))

- name: semver-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: semver-resource
    access_token: ((concourse_github_dummy.access_token))

- name: time-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: time-resource
    access_token: ((concourse_github_dummy.access_token))

- name: tracker-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: tracker-resource
    access_token: ((concourse_github_dummy.access_token))

- name: concourse-image-dpkg-list
  type: gcs
  icon: format-list-bulleted
  source:
    bucket: concourse-ubuntu-dpkg-list
    json_key: ((concourse_dpkg_list_json_key))
    regexp: "concourse-dpkg-list-(.*).txt"

- name: resource-postgresql-version
  type: gcs
  icon: format-list-bulleted
  source:
    bucket: concourse-components-version
    json_key: ((concourse_components_json_key))
    regexp: "postgresql-version-(.*).txt"

- name: resource-helm-version
  type: gcs
  icon: format-list-bulleted
  source:
    bucket: concourse-components-version
    json_key: ((concourse_components_json_key))
    regexp: "helm-version-(.*).txt"

- name: periodic-check
  type: time
  source:
    interval: 24h

- name: release-me
  type: github-release
  source:
    owner: clarafu
    repository: release-me
