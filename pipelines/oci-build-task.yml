resource_types:
#TODO: remove after next release. Needed for the get.params.platform feature
- name: registry-image
  type: registry-image
  source:
    repository: concourse/registry-image-resource
    tag: 1.13.0
    username: ((docker.username))
    password: ((docker.password))

resources:
  - name: repo
    type: git
    icon: github
    source:
      uri: https://github.com/concourse/oci-build-task.git
      branch: master

  - name: ci
    type: git
    icon: github
    source:
      uri: https://github.com/concourse/ci.git
      branch: master

  - name: oci-build-task
    type: registry-image
    icon: docker
    source:
      repository: concourse/oci-build-task
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: oci-build-task-dev
    type: registry-image
    icon: docker
    source:
      repository: concourse/oci-build-task
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: golang-builder
    type: registry-image
    icon: docker
    source:
      repository: concourse/golang-builder
      tag: latest

  - name: version
    type: semver
    icon: tag
    source:
      uri: git@github.com:concourse/oci-build-task
      private_key: ((concourse_bot_private_key))
      branch: version
      driver: git
      file: version

  - name: repo-release
    type: github-release
    icon: package-variant-closed
    source:
      owner: concourse
      repository: oci-build-task
      access_token: ((concourse_bot_access_token))

  - name: wolfi
    type: registry-image
    icon: docker
    source:
      repository: cgr.dev/chainguard/wolfi-base

jobs:
  - name: build
    plan:
      - in_parallel:
          - get: repo
            trigger: true
          - get: oci-build-task
          - get: golang-rootfs
            resource: golang-builder
          - get: golang-builder
            params:
              format: oci-layout
          - get: wolfi
            params:
              format: oci-layout

      - task: tests
        privileged: true
        image: golang-rootfs
        config:
          platform: linux
          inputs:
            - name: repo
          run:
            path: sh
            args:
              - -c
              - |
                apk --no-cache --no-progress add bash curl
                repo/scripts/test

      - task: build
        privileged: true
        image: oci-build-task
        config:
          platform: linux
          inputs:
            - name: repo
            - name: wolfi
            - name: golang-builder
          outputs:
            - name: image
          params:
            CONTEXT: repo
            OUTPUT_OCI: true
            IMAGE_ARG_base_image: wolfi/oci
            IMAGE_ARG_builder_image: golang-builder/oci
            IMAGE_PLATFORM: linux/amd64,linux/arm64
          run:
            path: build

      - put: oci-build-task-dev
        inputs: detect
        no_get: true
        params:
          image: image/image

  - name: scan
    plan:
      - in_parallel:
          - get: repo
            trigger: true
            passed: [build]
          - get: ci
          - get: wolfi
          - get: oci-build-task-dev
            trigger: true
            passed: [build]
            params:
              format: oci-layout
      - task: scan
        image: wolfi
        file: ci/tasks/trivy-scan/task.yml
        input_mapping: { image: oci-build-task-dev }
        params:
          IMAGE_PATH: image/oci

  - name: publish-major
    plan:
      - in_parallel:
          - get: repo
            passed: [build]
          - get: version
            params:
              bump: major
          - in_parallel: &image-fetching
              - get: oci-build-task-dev
                passed: [build]
                params:
                  format: oci-layout
              - get: rootfs-amd64
                resource: oci-build-task-dev
                passed: [build]
                params:
                  platform:
                    architecture: amd64
              - get: rootfs-arm64
                resource: oci-build-task-dev
                passed: [build]
                params:
                  platform:
                    architecture: arm64
              - get: wolfi
      - task: wrangle
        image: wolfi
        config: &version-name
          platform: linux
          inputs:
            - name: version
            - name: rootfs-amd64
            - name: rootfs-arm64
          outputs:
            - name: version
            - name: rootfs-amd64
            - name: rootfs-arm64
          run:
            path: sh
            args:
              - -cex
              - |
                ver=$(cat version/version)
                echo "v${ver}" > version/name
                cd rootfs-amd64
                  tar -czf rootfs.tgz --directory=rootfs/ .
                  tar -czf rootfs-amd64.tgz rootfs.tgz metadata.json
                  rm rootfs.tgz
                cd -
                cd rootfs-arm64
                  tar -czf rootfs.tgz --directory=rootfs/ .
                  tar -czf rootfs-arm64.tgz rootfs.tgz metadata.json
                  rm rootfs.tgz
                cd -
      - load_var: version
        file: version/version
      - in_parallel: &upload-release
          - put: repo-release
            no_get: true
            inputs: detect
            params:
              commitish: repo/.git/ref
              generate_release_notes: true
              globs:
                - rootfs-amd64/rootfs-*.tgz
                - rootfs-arm64/rootfs-*.tgz
              name: version/name
              tag: version/version
              tag_prefix: v
          - put: oci-build-task
            no_get: true
            inputs: detect
            params:
              image: oci-build-task-dev/oci
              version: ((.:version))
              bump_aliases: true
      - put: version
        no_get: true
        inputs: detect
        params:
          file: version/version

  - name: publish-minor
    plan:
      - in_parallel:
          - get: repo
            passed: [build]
          - get: version
            params:
              bump: minor
          - in_parallel: *image-fetching
      - task: wrangle
        image: wolfi
        config: *version-name
      - load_var: version
        file: version/version
      - in_parallel: *upload-release
      - put: version
        no_get: true
        inputs: detect
        params:
          file: version/version

  - name: publish-patch
    plan:
      - in_parallel:
          - get: repo
            passed: [build]
          - get: version
            params:
              bump: patch
          - in_parallel: *image-fetching
      - task: wrangle
        image: wolfi
        config: *version-name
      - load_var: version
        file: version/version
      - in_parallel: *upload-release
      - put: version
        no_get: true
        inputs: detect
        params:
          file: version/version
