display:
  background_image: https://storage.googleapis.com/concourse-media-assets/concourse-emi-background-clean.png

resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

- name: helm-chart
  type: registry-image
  source: {repository: linkyard/helm-chart-resource, tag: 2.17.0}

- name: registry-image
  type: registry-image
  source: {repository: concourse/registry-image-resource, tag: dev}

groups:
- name: develop
  jobs:
  - unit
  - dev-image
  - integration
  - testflight
  - worker-runtime
  - watsjs
  - build-concourse
  - build-image
  - bin-smoke
  - bin-smoke-rapid
  - check-docker-mounts

- name: quickstart
  jobs:
  - quickstart-smoke

- name: k8s
  jobs:
  - k8s-*

- name: images
  jobs:
  - resource-types-images
  - unit-image
  - build-golang-builder-image
  - build-resource-types-builder-image
  - build-resource-types-base-image-static

- name: all
  jobs:
  - "*"

jobs:
- name: unit-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
      resource: ci-unit-image
      trigger: true
    - get: oci-build-task
    - get: golang-builder-image
      trigger: true
      params: {format: oci}
  - task: build
    image: oci-build-task
    privileged: true
    config:
      platform: linux
      params:
        CONTEXT: ci/dockerfiles/unit
        IMAGE_ARG_base_image: golang-builder-image/image.tar
      inputs: [{name: ci}, {name: golang-builder-image}]
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: unit-image
    params: {image: image/image.tar}

- name: build-golang-builder-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: oci-build-task
    - get: golang-linux
      trigger: true
    - get: ubuntu-image
      trigger: true
      params: {skip_download: true}
  - load_var: golang_version
    file: golang-linux/version
  - load_var: base_image_tag
    file: ubuntu-image/tag
  - task: build
    image: oci-build-task
    privileged: true
    file: ci/tasks/build-golang-builder-image.yml
    params:
      BUILD_ARG_base_image_tag: ((.:base_image_tag))
      BUILD_ARG_golang_version: ((.:golang_version))
  - in_parallel:
    - put: golang-builder-image
      params:
        image: image/image
        version: ((.:golang_version))
        bump_aliases: true

    # push to latest (+ bare semver tags) to make local dev a bit easier
    - put: golang-builder-image-latest
      params:
        image: image/image
        version: ((.:golang_version))
        bump_aliases: true

- name: build-resource-types-builder-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: oci-build-task
    - get: ubuntu-image
      trigger: true
      params: {skip_download: true}
  - load_var: base_image_tag
    file: ubuntu-image/tag
  - task: build
    image: oci-build-task
    privileged: true
    file: ci/tasks/build-resource-types-builder-image.yml
    params:
      BUILD_ARG_base_image_tag: ((.:base_image_tag))
  - in_parallel:
    - put: resource-types-builder-image-ubuntu
      params:
        image: image/image
        bump_aliases: true

- name: build-resource-types-base-image-static
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: oci-build-task
    - get: paketo-jammy-static-image
      trigger: true
      params: {format: oci}
  - task: build
    image: oci-build-task
    privileged: true
    file: ci/tasks/build-resource-types-base-image-static.yml
    params:
      IMAGE_ARG_base_image: paketo-jammy-static-image/image.tar
  - in_parallel:
    - put: resource-types-base-image-static
      params:
        image: image/image
        additional_tags: paketo-jammy-static-image/tag

- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
    - task: fly-darwin
      file: ci/tasks/fly-darwin.yml
    - task: fly-windows
      file: ci/tasks/fly-windows.yml
    - task: unit-baggageclaim
      image: unit-image
      file: ci/tasks/unit-baggageclaim.yml
      privileged: true
      input_mapping: {concourse: built-concourse}
    - task: unit-baggageclaim-darwin
      file: ci/tasks/unit-baggageclaim-darwin.yml
      input_mapping: {concourse: built-concourse}
    - task: unit-baggageclaim-windows
      file: ci/tasks/unit-baggageclaim-windows.yml
      input_mapping: {concourse: built-concourse}

- name: resource-types-images
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: oci-build-task
    - get: ci
    - get: registry-image-resource
      trigger: true
    - get: docker-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: tracker-resource
      trigger: true
    - get: hg-resource
      trigger: true
    - get: semver-resource
      trigger: true
    - get: s3-resource
      trigger: true
    - get: pool-resource
      trigger: true
    - get: mock-resource
      trigger: true
    - get: bosh-io-release-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: bosh-io-stemcell-resource
      trigger: true
    - get: github-release-resource
      trigger: true
  - task: build-ubuntu
    output_mapping: {image: image_ubuntu}
    image: oci-build-task
    privileged: true
    file: ci/tasks/build-resource-types-image.yml
  - put: resource-types-ubuntu-image
    params: {image: image_ubuntu/image.tar}
    get_params: {format: oci}

- name: dev-image
  public: true
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: concourse
        trigger: true
      - get: golang-builder-image-rootfs
        resource: golang-builder-image
        trigger: true
        params: {format: rootfs}
      - get: containerd
        trigger: true
      - get: runc
        trigger: true
      - get: gdn
        trigger: true
      - get: cni
        trigger: true
      - get: dumb-init
        trigger: true
      - get: resource-types-ubuntu-image
        passed: [resource-types-images]
        trigger: true
      - get: unit-image
        trigger: true
      - get: golang-builder-image
        trigger: true
        params: {format: oci}
      - get: oci-build-task
        trigger: true
      - get: ci
  - in_parallel:
      fail_fast: true
      steps:
      - task: yarn-build
        image: unit-image
        file: ci/tasks/yarn-build.yml
      - task: fly-linux
        file: ci/tasks/fly-build-linux.yml
        image: golang-builder-image-rootfs
      - task: fly-windows
        file: ci/tasks/fly-build-windows.yml
      - task: fly-darwin
        file: ci/tasks/fly-build-darwin.yml
  - task: build
    image: oci-build-task
    privileged: true
    input_mapping: {concourse: built-concourse, resource-types-image: resource-types-ubuntu-image}
    file: ci/tasks/build-dev-image-multi-arch.yml
  - put: dev-image
    params: {image: image/image}
    get_params: {format: oci}

- name: worker-runtime
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      trigger: true
    - get: ci
  - task: integration
    image: dev-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration.yml

- name: check-docker-mounts
  public: true
  max_in_flight: 1
  plan:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: ci
    - task: docker-mounts
      image: unit-image
      privileged: true
      file: ci/tasks/docker-mounts.yml

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: postgres-image-legacy
      params: {format: oci}
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: postgres-image
      values:
      - postgres-image
      - postgres-image-legacy
      max_in_flight: all
    task: testflight
    image: unit-image
    privileged: true
    params:
      RUNTIME: ((.:runtime))
    file: ci/tasks/docker-compose-testflight.yml
    input_mapping: {postgres-image: ((.:postgres-image))}

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml

- name: integration
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: vault-image
      params: {format: oci}
    - get: ci
  - task: integration
    privileged: true
    image: unit-image
    file: ci/tasks/integration.yml

- name: k8s-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-image]
      trigger: true
    - get: concourse-dev-image
      passed: [build-image]
      params: {format: oci}
      trigger: true
    - get: concourse-chart
      trigger: true
    - get: unit-image
    - get: ci
  - try:
      task: try-delete
      image: unit-image
      file: ci/tasks/k8s-delete.yml
      params:
        SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
        RELEASE_NAME: concourse-smoke
        CONCOURSE_IMAGE: concourse/concourse-dev
  - task: deploy
    image: unit-image
    input_mapping: {image-info: concourse-dev-image}
    file: ci/tasks/k8s-deploy.yml
    params:
      SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
      RELEASE_NAME: concourse-smoke
      CONCOURSE_IMAGE: concourse/concourse-dev
  - task: k8s-smoke
    image: unit-image
    file: ci/tasks/k8s-smoke.yml
    params:
      SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
      RELEASE_NAME: concourse-smoke
      MAX_TICKS: 300
  - task: delete
    image: unit-image
    file: ci/tasks/k8s-delete.yml
    params:
      SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
      RELEASE_NAME: concourse-smoke
      CONCOURSE_IMAGE: concourse/concourse-dev

- name: k8s-topgun
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: concourse-dev-image
      params: {format: oci}
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: unit-image
      tags: [k8s-topgun]
    - get: concourse-chart
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: prometheus-chart
      tags: [k8s-topgun]
      params: {untar: true}
    - get: postgresql-chart
      tags: [k8s-topgun]
      params: {untar: true}
    - get: ci
      tags: [k8s-topgun]
  - task: k8s-topgun
    file: ci/tasks/k8s-topgun.yml
    tags: [k8s-topgun]
    image: unit-image
    input_mapping: {concourse-rc-image: concourse-dev-image}
    params:
      IN_CLUSTER: "true"
      SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
      CONCOURSE_IMAGE_NAME: concourse/concourse-dev

- name: k8s-check-helm-params
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-image]
      trigger: true
    - get: concourse-dev-image
      passed: [build-image]
      trigger: true
    - get: linux-dev-ubuntu
      passed: [build-image]
      trigger: true
    - get: unit-image
    - get: concourse-chart
      trigger: true
    - get: ci
  - task: check-params
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-chart, linux-rc: linux-dev-ubuntu}
    params: {DISTRIBUTION: helm}

- name: build-concourse
  old_name: build-rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [dev-image, testflight, watsjs, integration, worker-runtime]
      trigger: true
    - get: unit-image
      passed: [dev-image]
    - get: dev-image
      passed: [dev-image]
      trigger: true
    - get: golang-builder-image
      passed: [dev-image]
    - get: ci
    - get: resource-types-ubuntu-image
      passed: [dev-image]
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
      image: golang-builder-image
    - task: fly-windows
      file: ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: ci/tasks/fly-build-darwin.yml
  - in_parallel:
      fail_fast: true
      steps:
        - task: hoist-linux-dependencies
          file: ci/tasks/hoist-linux-dependencies.yml
          image: dev-image
        - task: hoist-resource-types-ubuntu
          file: ci/tasks/hoist-linux-resource-types.yml
          image: resource-types-ubuntu-image
          output_mapping: {resource-types: resource-types-ubuntu}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
  - task: get-dev-version
    file: ci/tasks/get-dev-version.yml
    image: golang-builder-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-ubuntu
        image: golang-builder-image
        params: {PLATFORM: linux, VARIANT: ubuntu}
        file: ci/tasks/concourse-build-linux.yml
        input_mapping: {concourse: built-concourse, resource-types: resource-types-ubuntu}
        output_mapping: {concourse-tarball: concourse-linux-ubuntu}
      - task: concourse-windows
        file: ci/tasks/concourse-build-windows.yml
        input_mapping: {concourse: built-concourse}
      - task: concourse-darwin
        file: ci/tasks/concourse-build-darwin.yml
        input_mapping: {concourse: built-concourse}
        output_mapping: {concourse-tarball: concourse-darwin}
  - in_parallel:
    - put: linux-dev-ubuntu
      params: {file: concourse-linux-ubuntu/concourse-*.tgz}
      inputs: [concourse-linux-ubuntu]
    - put: windows-dev
      params: {file: concourse-windows/concourse-*.zip}
      inputs: [concourse-windows]
    - put: darwin-dev
      params: {file: concourse-darwin/concourse-*.tgz}
      inputs: [concourse-darwin]

- name: build-image
  old_name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: linux-dev-ubuntu
      trigger: true
      passed: [build-concourse]
    - get: concourse-docker
      trigger: true
    - get: oci-build-task
    - get: ci
  - task: build-ubuntu
    file: concourse-docker/ci/build-image.yml
    image: oci-build-task
    input_mapping: {linux-rc: linux-dev-ubuntu}
    output_mapping: {image: image-ubuntu}
    privileged: true
  - put: concourse-dev-image
    inputs: [image-ubuntu]
    params:
      image: image-ubuntu/image.tar

- name: bin-smoke
  public: true
  serial: true
  serial_groups: [bin-smoke]
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-concourse]
      trigger: true
    - get: linux-dev-ubuntu
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: gcp-image
      values:
      - ubuntu-2204-lts-cgroups-v1
      max_in_flight: 1
    do:
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke.yml
      input_mapping: {linux-rc: linux-dev-ubuntu}
      params:
        GCP_PROJECT: cf-concourse-production
        GCP_KEY: ((concourse_smoke_gcp_key))
        SSH_KEY: ((concourse_smoke_ssh_key))
        WORKSPACE: bin-smoke-((.:runtime))
        TF_VAR_GCP_IMAGE: ((.:gcp-image))
        TF_VAR_RUNTIME: ((.:runtime))
    - task: smoke
      image: unit-image
      file: ci/tasks/smoke.yml
      input_mapping: {endpoint-info: outputs}
      params: {MAX_TICKS: 300}
      ensure:
        task: terraform-cleanup
        image: unit-image
        file: ci/tasks/terraform-cleanup.yml
        params:
          GCP_PROJECT: cf-concourse-production
          GCP_KEY: ((concourse_smoke_gcp_key))
          SSH_KEY: ((concourse_smoke_ssh_key))
          WORKSPACE: bin-smoke-((.:runtime))
          TF_VAR_GCP_IMAGE: ((.:gcp-image))
          TF_VAR_RUNTIME: ((.:runtime))
    timeout: 20m

- name: bin-smoke-rapid
  public: true
  serial: true
  serial_groups: [bin-smoke]
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-concourse]
      trigger: true
    - get: linux-dev-ubuntu
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: gcp-image
      values:
      - ubuntu-1804-lts
      - ubuntu-2204-lts
      max_in_flight: 1
    do:
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke.yml
      input_mapping: {linux-rc: linux-dev-ubuntu}
      params:
        GCP_PROJECT: cf-concourse-production
        GCP_KEY: ((concourse_smoke_gcp_key))
        SSH_KEY: ((concourse_smoke_ssh_key))
        WORKSPACE: bin-smoke-((.:runtime))
        TF_VAR_GCP_IMAGE: ((.:gcp-image))
        TF_VAR_RUNTIME: ((.:runtime))
    - task: smoke
      image: unit-image
      file: ci/tasks/smoke.yml
      input_mapping: {endpoint-info: outputs}
      params: {MAX_TICKS: 300}
      # ensure:
      #   task: terraform-cleanup
      #   image: unit-image
      #   file: ci/tasks/terraform-cleanup.yml
      #   params:
      #     GCP_PROJECT: cf-concourse-production
      #     GCP_KEY: ((concourse_smoke_gcp_key))
      #     SSH_KEY: ((concourse_smoke_ssh_key))
      #     WORKSPACE: bin-smoke-((.:runtime))
      #     TF_VAR_GCP_IMAGE: ((.:gcp-image))
      #     TF_VAR_RUNTIME: ((.:runtime))
    timeout: 20m

- name: quickstart-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: concourse-dev-image
      passed: [build-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: ci
    - get: docs
  - task: quickstart-smoke
    privileged: true
    image: unit-image
    file: ci/tasks/quickstart-smoke.yml
    input_mapping: {concourse-rc-image: concourse-dev-image}
    params:
      RELEASE_NAME: concourse-smoke

resources:
- name: concourse
  type: git
  icon: &git-icon github
  source:
    uri: https://github.com/concourse/concourse.git
    branch: main
    private_key: ((github/concourse/concourse.private_key))

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: main
    private_key: ((github/concourse/ci.private_key))

- name: ci-unit-image
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: main
    private_key: ((github/concourse/ci.private_key))
    paths:
    - dockerfiles/unit

- name: dev-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/dev
    tag: latest
    username: ((docker.username))
    password: ((docker.read_write))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    tag: latest
    username: ((docker.username))
    password: ((docker.read_write))

- name: unit-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/unit
    tag: latest
    username: ((docker.username))
    password: ((docker.read_write))

- name: golang-builder-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.read_write))
    variant: jammy

- name: golang-builder-image-latest
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.read_write))

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source:
    repository: postgres
    username: ((docker.username))
    password: ((docker.public_read))

- name: postgres-image-legacy
  type: registry-image
  icon: *image-icon
  source:
    repository: postgres
    tag: 11
    username: ((docker.username))
    password: ((docker.public_read))

- name: vault-image
  type: registry-image
  icon: *image-icon
  source:
    repository: hashicorp/vault
    username: ((docker.username))
    password: ((docker.public_read))

- name: containerd
  type: github-release
  icon: &release-icon package-variant-closed
  source:
    owner: containerd
    repository: containerd
    access_token: ((github/release_token))

- name: runc
  type: github-release
  icon: *release-icon
  source:
    owner: opencontainers
    repository: runc
    access_token: ((github/release_token))

- name: dumb-init
  type: github-release
  icon: *release-icon
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((github/release_token))

- name: gdn
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((github/release_token))

- name: cni
  type: github-release
  icon: *release-icon
  source:
    owner: containernetworking
    repository: plugins
    access_token: ((github/release_token))

- name: mock-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/mock-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: bosh-io-release-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/bosh-io-release-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: bosh-io-stemcell-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/bosh-io-stemcell-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: docker-image-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/docker-image-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: git-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/git-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: github-release-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/github-release-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: hg-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/hg-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: pool-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/pool-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: registry-image-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/registry-image-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: s3-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/s3-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: semver-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/semver-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: time-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/time-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: tracker-resource
  type: registry-image
  icon: *release-icon
  source:
    repository: concourse/tracker-resource
    tag: dev
    username: ((docker.username))
    password: ((docker.public_read))

- name: oci-build-task
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/oci-build-task
    username: ((docker.username))
    password: ((docker.public_read))

- name: linux-dev-ubuntu
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: dev/concourse-(.*)\.linux-ubuntu\.amd64\.tgz

- name: windows-dev
  type: gcs
  icon: microsoft-windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: dev/concourse-(.*)\.windows\.amd64\.zip

- name: darwin-dev
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: dev/concourse-(.*)\.darwin\.amd64\.tgz

- name: docs
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/docs
    branch: master
    private_key: ((github/concourse/docs.private_key))

- name: concourse-docker
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse-docker
    branch: master
    private_key: ((github/concourse/concourse-docker.private_key))

- name: concourse-chart
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-chart.git
    branch: dev
    private_key: ((github/concourse/concourse-chart.private_key))

- name: prometheus-chart
  type: helm-chart
  icon: &helm-icon ship-wheel
  source:
    chart: prometheus-community/prometheus
    repos:
      - name: prometheus-community
        url: https://prometheus-community.github.io/helm-charts

- name: postgresql-chart
  type: helm-chart
  icon: *helm-icon
  source:
    chart: bitnami/postgresql
    repos:
      - name: bitnami
        url: https://charts.bitnami.com/bitnami

- name: golang-linux
  type: s3
  icon: language-go
  source:
    endpoint: storage.googleapis.com
    bucket: golang
    regexp: 'go(\d+\.\d+(\.\d+)?)\.linux-amd64\.tar\.gz$'

- name: resource-types-ubuntu-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    tag: ubuntu
    username: ((docker.username))
    password: ((docker.public_read))

- name: concourse-dev-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-dev
    tag: latest
    username: ((docker.username))
    password: ((docker.read_write))

- name: ubuntu-image
  type: registry-image
  icon: *image-icon
  source:
    repository: ubuntu
    tag: jammy
    username: ((docker.username))
    password: ((docker.public_read))

- name: paketo-jammy-static-image
  type: registry-image
  icon: *image-icon
  source:
    repository: paketobuildpacks/run-jammy-static
    username: ((docker.username))
    password: ((docker.public_read))

- name: resource-types-builder-image-ubuntu
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types-builder
    tag: jammy
    username: ((docker.username))
    password: ((docker.read_write))

- name: resource-types-base-image-static
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types-base-image-static
    tag: latest
    username: ((docker.username))
    password: ((docker.read_write))
