display:
  background_image: https://storage.googleapis.com/concourse-media-assets/concourse-emi-background-clean.png

resource_types:
  - name: gcs
    type: registry-image
    source: { repository: frodenas/gcs-resource }

  - name: bosh-release
    type: registry-image
    source: { repository: dpb587/bosh-release-resource }

  - name: bosh-deployment
    type: registry-image
    source: { repository: cloudfoundry/bosh-deployment-resource }

  - name: helm-chart
    type: registry-image
    source: { repository: linkyard/helm-chart-resource, tag: 2.17.0 }

  #TODO: remove after 7.14 upgrade. Needed for the get.params.platform feature
  - name: registry-image
    type: registry-image
    source:
      repository: concourse/registry-image-resource
      tag: 1.13.0
      username: ((docker.username))
      password: ((docker.password))

groups:
  - name: develop
    jobs:
      - unit
      - dev-image
      - integration
      - testflight
      - worker-runtime
      - watsjs
      - build-concourse
      - build-image
      - bin-smoke
      - check-docker-mounts
      - bump-prod-*

  - name: quickstart
    jobs:
      - quickstart-smoke

  - name: k8s
    jobs:
      - k8s-*

  - name: bosh
    jobs:
      - bosh-*

  - name: images
    jobs:
      - dev-image
      - resource-types-images
      - unit-image
      - build-golang-builder-image

  - name: all
    jobs:
      - "*"

jobs:
  - name: unit-image
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: ci
            resource: ci-unit-image
            trigger: true
          - get: oci-build-task
          - get: golang-builder-image
            trigger: true
            params: { format: oci }
      - task: build
        image: oci-build-task
        privileged: true
        config:
          platform: linux
          params:
            CONTEXT: ci/dockerfiles/unit
            IMAGE_ARG_base_image: golang-builder-image/image.tar
          inputs: [{ name: ci }, { name: golang-builder-image }]
          outputs: [{ name: image }]
          caches: [{ path: cache }]
          run: { path: build }
      - put: unit-image
        no_get: true
        inputs: detect
        params: { image: image/image.tar }

  - name: build-golang-builder-image
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: ci
          - get: oci-build-task
          - get: golang-linux
            trigger: true
          - get: wolfi-base
            trigger: true
            params:
              format: oci-layout
      - load_var: go_version
        file: golang-linux/version
        reveal: true
      - task: build
        image: oci-build-task
        privileged: true
        file: ci/tasks/build-golang-builder-image/task.yml
        input_mapping:
          base-image: wolfi-base
        params:
          BUILD_ARG_golang_version: ((.:go_version))
          IMAGE_ARG_base_image: base-image/oci
      - put: golang-builder-image
        no_get: true
        inputs: detect
        params:
          image: image/image

  - name: unit
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            trigger: true
          - get: unit-image
            trigger: true
          - get: ci
      - task: yarn-test
        image: unit-image
        file: ci/tasks/yarn-test/task.yml
      - in_parallel:
          - task: unit
            image: unit-image
            file: ci/tasks/unit/task.yml
            input_mapping: { concourse: built-concourse }
          - task: fly-windows
            file: ci/tasks/fly-windows/task.yml
          - task: unit-baggageclaim
            image: unit-image
            file: ci/tasks/unit-baggageclaim/task.yml
            privileged: true
            input_mapping: { concourse: built-concourse }
          - task: unit-baggageclaim-windows
            file: ci/tasks/unit-baggageclaim-windows/task.yml
            input_mapping: { concourse: built-concourse }

  - name: resource-types-images
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: oci-build-task
          - get: ci
          #amd64
          - get: registry-image-amd64
            resource: registry-image-resource
            trigger: true
            params: &amd64
              platform:
                architecture: amd64
          - get: docker-image-amd64
            resource: docker-image-resource
            trigger: true
            params: *amd64
          - get: git-amd64
            resource: git-resource
            trigger: true
            params: *amd64
          - get: hg-amd64
            resource: hg-resource
            trigger: true
            params: *amd64
          - get: semver-amd64
            resource: semver-resource
            trigger: true
            params: *amd64
          - get: s3-amd64
            resource: s3-resource
            trigger: true
            params: *amd64
          - get: pool-amd64
            resource: pool-resource
            trigger: true
            params: *amd64
          - get: mock-amd64
            resource: mock-resource
            trigger: true
            params: *amd64
          - get: bosh-io-release-amd64
            resource: bosh-io-release-resource
            trigger: true
            params: *amd64
          - get: time-amd64
            resource: time-resource
            trigger: true
            params: *amd64
          - get: bosh-io-stemcell-amd64
            resource: bosh-io-stemcell-resource
            trigger: true
            params: *amd64
          - get: github-release-amd64
            resource: github-release-resource
            trigger: true
            params: *amd64
          # arm64
          - get: registry-image-arm64
            resource: registry-image-resource
            trigger: true
            params: &arm64
              platform:
                architecture: arm64
          - get: docker-image-arm64
            resource: docker-image-resource
            trigger: true
            params: *arm64
          - get: git-arm64
            resource: git-resource
            trigger: true
            params: *arm64
          - get: hg-arm64
            resource: hg-resource
            trigger: true
            params: *arm64
          - get: semver-arm64
            resource: semver-resource
            trigger: true
            params: *arm64
          - get: s3-arm64
            resource: s3-resource
            trigger: true
            params: *arm64
          - get: pool-arm64
            resource: pool-resource
            trigger: true
            params: *arm64
          - get: mock-arm64
            resource: mock-resource
            trigger: true
            params: *arm64
          - get: bosh-io-release-arm64
            resource: bosh-io-release-resource
            trigger: true
            params: *arm64
          - get: time-arm64
            resource: time-resource
            trigger: true
            params: *arm64
          - get: bosh-io-stemcell-arm64
            resource: bosh-io-stemcell-resource
            trigger: true
            params: *arm64
          - get: github-release-arm64
            resource: github-release-resource
            trigger: true
            params: *arm64
      - task: build
        image: oci-build-task
        privileged: true
        file: ci/tasks/build-resource-types-image/task.yml
      - put: resource-types-image
        no_get: true
        inputs: detect
        params:
          image: image/image

  - name: dev-image
    public: true
    serial: true
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: concourse
              trigger: true
            - get: golang-builder-image-rootfs
              resource: golang-builder-image
              trigger: true
              params: { format: rootfs }
            - get: golang-builder-image
              trigger: true
              params:
                format: oci-layout
            - get: containerd
              trigger: true
            - get: runc
              trigger: true
            - get: gdn
              trigger: true
            - get: cni
              trigger: true
            - get: dumb-init
              trigger: true
            - get: resource-types-amd64
              resource: resource-types-image
              passed: [resource-types-images]
              trigger: true
              params:
                platform:
                  architecture: amd64
            - get: resource-types-arm64
              resource: resource-types-image
              passed: [resource-types-images]
              trigger: true
              params:
                platform:
                  architecture: arm64
            - get: unit-image
            - get: oci-build-task
            - get: ci
      - in_parallel:
          fail_fast: true
          steps:
            - task: yarn-build
              image: unit-image
              file: ci/tasks/yarn-build/task.yml
            - task: fly-linux
              image: golang-builder-image-rootfs
              file: ci/tasks/fly-build/task.yml
              output_mapping:
                fly-builds: fly-linux
              params:
                PLATFORMS: linux/amd64,linux/arm64
            - task: fly-darwin
              image: golang-builder-image-rootfs
              file: ci/tasks/fly-build/task.yml
              output_mapping:
                fly-builds: fly-darwin
              params:
                PLATFORMS: darwin/amd64,darwin/arm64
            - task: fly-windows
              image: golang-builder-image-rootfs
              file: ci/tasks/fly-build/task.yml
              output_mapping:
                fly-builds: fly-windows
              params:
                PLATFORMS: windows/amd64
      - task: build
        image: oci-build-task
        privileged: true
        input_mapping:
          concourse: built-concourse
          base-image: golang-builder-image
        file: ci/tasks/build-dev-image/task.yml
        params:
          IMAGE_ARG_base_image: base-image/oci
      - put: dev-image
        no_get: true
        inputs: detect
        params:
          image: image/image

  - name: worker-runtime
    public: true
    max_in_flight: 1
    plan:
      - in_parallel:
          - get: concourse
            passed: [unit, dev-image]
            trigger: true
          - get: dev-image
            passed: [dev-image]
            trigger: true
          - get: ci
      - task: integration
        image: dev-image
        privileged: true
        timeout: 1h
        file: ci/tasks/containerd-integration/task.yml

  - name: check-docker-mounts
    public: true
    max_in_flight: 1
    plan:
      - get: concourse
        passed: [unit, dev-image]
        trigger: true
      - get: unit-image
      - get: ci
      - task: docker-mounts
        image: unit-image
        privileged: true
        file: ci/tasks/docker-mounts/task.yml

  - name: testflight
    public: true
    max_in_flight: 2
    plan:
      - in_parallel:
          - get: concourse
            passed: [unit, dev-image]
            trigger: true
          - get: unit-image
          - get: dev-image
            passed: [dev-image]
            trigger: true
            params: { format: oci }
          - get: postgres-image
            params: { format: oci }
          - get: postgres-image-legacy
            params: { format: oci }
          - get: ci
      - across:
          - var: runtime
            values:
              - guardian
              - containerd
            max_in_flight: all
          - var: postgres-image
            values:
              - postgres-image
              - postgres-image-legacy
            max_in_flight: all
        task: testflight
        image: unit-image
        privileged: true
        params:
          RUNTIME: ((.:runtime))
        file: ci/tasks/testflight/task.yml
        input_mapping: { postgres-image: ((.:postgres-image)) }

  - name: watsjs
    public: true
    max_in_flight: 2
    plan:
      - in_parallel:
          - get: concourse
            passed: [unit, dev-image]
            trigger: true
          - get: unit-image
          - get: dev-image
            passed: [dev-image]
            trigger: true
            params: { format: oci }
          - get: postgres-image
            params: { format: oci }
          - get: ci
      - task: watsjs
        attempts: 3
        image: unit-image
        privileged: true
        timeout: 1h
        file: ci/tasks/watsjs/task.yml

  - name: integration
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [unit, dev-image]
            trigger: true
          - get: dev-image
            passed: [dev-image]
            params: { format: oci }
            trigger: true
          - get: unit-image
          - get: concourse-image
            params: { format: oci }
          - get: postgres-image
            params: { format: oci }
          - get: vault-image
            params: { format: oci }
          - get: ci
      - task: integration
        privileged: true
        image: unit-image
        file: ci/tasks/integration-tests/task.yml

  - name: k8s-smoke
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [build-image]
            trigger: true
          - get: concourse-dev-image
            passed: [build-image]
            params: { format: oci }
            trigger: true
          - get: concourse-chart
            trigger: true
          - get: unit-image
          - get: ci
      - try:
          task: try-delete
          image: unit-image
          file: ci/tasks/k8s-smoke/delete.yml
          params:
            SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
            RELEASE_NAME: concourse-smoke
            CONCOURSE_IMAGE: concourse/concourse-dev
      - task: deploy
        image: unit-image
        input_mapping: { image-info: concourse-dev-image }
        file: ci/tasks/k8s-smoke/deploy.yml
        params:
          SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
          RELEASE_NAME: concourse-smoke
          CONCOURSE_IMAGE: concourse/concourse-dev
      - task: k8s-smoke
        image: unit-image
        file: ci/tasks/k8s-smoke/tests.yml
        params:
          SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
          RELEASE_NAME: concourse-smoke
          MAX_TICKS: 300
    ensure:
      task: delete
      image: unit-image
      file: ci/tasks/k8s-smoke/delete.yml
      params:
        SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
        RELEASE_NAME: concourse-smoke
        CONCOURSE_IMAGE: concourse/concourse-dev

  - name: k8s-topgun
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [k8s-smoke]
            tags: [k8s-topgun]
            trigger: true
          - get: concourse-dev-image
            params: { format: oci }
            passed: [k8s-smoke]
            tags: [k8s-topgun]
            trigger: true
          - get: unit-image
            tags: [k8s-topgun]
          - get: concourse-chart
            passed: [k8s-smoke]
            tags: [k8s-topgun]
            trigger: true
          - get: prometheus-chart
            tags: [k8s-topgun]
            params: { untar: true }
          - get: postgresql-chart-git
            tags: [k8s-topgun]
          - get: ci
            tags: [k8s-topgun]
      - task: k8s-topgun
        file: ci/tasks/k8s-topgun/task.yml
        tags: [k8s-topgun]
        image: unit-image
        input_mapping: { concourse-rc-image: concourse-dev-image }
        params:
          IN_CLUSTER: "true"
          SERVICE_ACCOUNT_KEY: ((k8s_topgun.service_account_key))
          CONCOURSE_IMAGE_NAME: concourse/concourse-dev

  - name: k8s-check-helm-params
    public: true
    max_in_flight: 1
    plan:
      - in_parallel:
          - get: concourse
            passed: [build-image]
            trigger: true
          - get: concourse-dev-image
            passed: [build-image]
            trigger: true
          - get: linux-amd64
            passed: [build-image]
            trigger: true
          - get: unit-image
          - get: concourse-chart
            trigger: true
          - get: ci
      - task: check-params
        file: ci/tasks/check-distribution-env/task.yml
        image: unit-image
        input_mapping: { distribution: concourse-chart, linux-rc: linux-amd64 }
        params: { DISTRIBUTION: helm }

  - name: build-concourse
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [dev-image, testflight, watsjs, integration, worker-runtime]
            trigger: true
          - get: unit-image
          - get: ci
          - get: golang-builder-image
            passed: [dev-image]
          - get: dev-amd64
            resource: dev-image
            passed: [dev-image]
            trigger: true
            params:
              platform:
                architecture: amd64
          - get: dev-arm64
            resource: dev-image
            passed: [dev-image]
            trigger: true
            params:
              platform:
                architecture: arm64
          - get: resource-types-amd64
            resource: resource-types-image
            passed: [dev-image]
            params:
              platform:
                architecture: amd64
          - get: resource-types-arm64
            resource: resource-types-image
            passed: [dev-image]
            params:
              platform:
                architecture: arm64
      - in_parallel:
          fail_fast: true
          steps:
            - task: fly-linux
              image: golang-builder-image
              file: ci/tasks/fly-build/task.yml
              output_mapping:
                fly-builds: fly-linux
              params:
                PLATFORMS: linux/amd64,linux/arm64
            - task: fly-darwin
              image: golang-builder-image
              file: ci/tasks/fly-build/task.yml
              output_mapping:
                fly-builds: fly-darwin
              params:
                PLATFORMS: darwin/amd64,darwin/arm64
            - task: fly-windows
              image: golang-builder-image
              file: ci/tasks/fly-build/task.yml
              output_mapping:
                fly-builds: fly-windows
              params:
                PLATFORMS: windows/amd64
            - task: yarn-build
              file: ci/tasks/yarn-build/task.yml
              image: unit-image
            - task: get-dev-version
              file: ci/tasks/get-dev-version/task.yml
              image: golang-builder-image
      - in_parallel:
          fail_fast: true
          steps:
            - task: concourse-linux
              image: golang-builder-image
              file: ci/tasks/concourse-build/task.yml
              input_mapping:
                concourse: built-concourse
              output_mapping:
                concourse-tarballs: concourse-linux
              params:
                PLATFORMS: linux/amd64,linux/arm64
            - task: concourse-darwin
              image: golang-builder-image
              file: ci/tasks/concourse-build/task.yml
              input_mapping:
                concourse: built-concourse
              output_mapping:
                concourse-tarballs: concourse-darwin
              params:
                PLATFORMS: darwin/amd64,darwin/arm64
            - task: concourse-windows
              image: golang-builder-image
              file: ci/tasks/concourse-build/task.yml
              input_mapping:
                concourse: built-concourse
              output_mapping:
                concourse-tarballs: concourse-windows
              params:
                PLATFORMS: windows/amd64
      - in_parallel:
          - put: linux-amd64
            no_get: true
            inputs: detect
            params: { file: concourse-linux/concourse-*.amd64.tgz }
          - put: linux-arm64
            no_get: true
            inputs: detect
            params: { file: concourse-linux/concourse-*.arm64.tgz }
          - put: darwin-amd64
            no_get: true
            inputs: detect
            params: { file: concourse-darwin/concourse-*.amd64.tgz }
          - put: darwin-arm64
            no_get: true
            inputs: detect
            params: { file: concourse-darwin/concourse-*.arm64.tgz }
          - put: windows-amd64
            no_get: true
            inputs: detect
            params: { file: concourse-windows/concourse-*.amd64.zip }

  - name: build-image
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [build-concourse]
            trigger: true
          - get: unit-image
          - get: linux-amd64
            trigger: true
            passed: [build-concourse]
          - get: linux-arm64
            trigger: true
            passed: [build-concourse]
          - get: concourse-docker
            trigger: true
          - get: oci-build-task
          - get: ci
      - task: build
        privileged: true
        file: concourse-docker/ci/build-image.yml
        image: oci-build-task
      - put: concourse-dev-image
        no_get: true
        inputs: detect
        params:
          image: image/image

  - name: bump-prod-web
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: infrastructure
      - load_var: concourse_image_repo
        file: concourse-image/repository
      - load_var: concourse_image_digest
        file: concourse-image/digest
      - task: bump-versions
        file: infrastructure/tasks/patch-yaml.yml
        input_mapping: { repo: infrastructure }
        output_mapping: { repo-bumped: infrastructure-bumped }
        params:
          FILE: terraform/environments/production/variables.yml
          PATCH:
            concourse_web_image_repo: ((.:concourse_image_repo))
            concourse_web_image_digest: ((.:concourse_image_digest))
          COMMIT: bump production web to concourse dev
      - put: infrastructure-bump
        no_get: true
        inputs: detect
        params:
          repository: infrastructure-bumped
          branch: master

  - name: bump-prod-workers
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: infrastructure
          - get: concourse-image
            resource: concourse-dev-image
            passed: [build-image]
            params: { skip_download: true }
          - get: windows-amd64
            passed: [build-concourse]
            params: { skip_download: "true" }
          - get: darwin-amd64
            passed: [build-concourse]
            params: { skip_download: "true" }
      - load_var: concourse_image_repo
        file: concourse-image/repository
      - load_var: concourse_image_digest
        file: concourse-image/digest
      - task: convert-windows-url
        file: infrastructure/tasks/convert-gs-url.yml
        input_mapping: { input: windows-amd64 }
        output_mapping: { output: windows }
      - task: convert-darwin-url
        file: infrastructure/tasks/convert-gs-url.yml
        input_mapping: { input: darwin-amd64 }
        output_mapping: { output: darwin }
      - load_var: concourse_windows_bundle_url
        file: windows/url
      - load_var: concourse_darwin_bundle_url
        file: darwin/url
      - task: bump-versions
        file: infrastructure/tasks/patch-yaml.yml
        input_mapping: { repo: infrastructure }
        output_mapping: { repo-bumped: infrastructure-bumped }
        params:
          FILE: terraform/environments/production/variables.yml
          PATCH:
            concourse_worker_image_repo: ((.:concourse_image_repo))
            concourse_worker_image_digest: ((.:concourse_image_digest))
            concourse_windows_bundle_url: ((.:concourse_windows_bundle_url))
            concourse_darwin_bundle_url: ((.:concourse_darwin_bundle_url))
          COMMIT: bump production workers to concourse dev
      - put: infrastructure-bump
        no_get: true
        inputs: detect
        params:
          repository: infrastructure-bumped
          branch: master

  - name: bin-smoke
    old_name: bin-smoke-rapid
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [build-concourse]
            trigger: true
          - get: linux-amd64
            passed: [build-concourse]
            trigger: true
          - get: linux-arm64
            passed: [build-concourse]
            trigger: true
          - get: unit-image
          - get: ci
      - across:
          - var: runtime
            values:
              - runtime: guardian
                arch: amd64
              - runtime: containerd
                arch: amd64
              - runtime: containerd
                arch: arm64
            max_in_flight: all
          - var: gcp-image
            values:
              - ubuntu-2204-lts
              - ubuntu-2404-lts
            max_in_flight: 1
        timeout: 40m
        do:
          - do:
              - task: terraform-apply
                image: unit-image
                file: ci/tasks/terraform-smoke/task.yml
                input_mapping: { linux-rc: linux-((.:runtime.arch)) }
                params:
                  GCP_PROJECT: cf-concourse-production
                  GCP_KEY: ((concourse_smoke_gcp_key))
                  SSH_KEY: ((concourse_smoke_ssh_key))
                  WORKSPACE: bin-smoke-((.:runtime.runtime))-((.:runtime.arch))
                  TF_VAR_GCP_IMAGE: ((.:gcp-image))
                  TF_VAR_RUNTIME: ((.:runtime.runtime))
                  TF_VAR_ARCH: ((.:runtime.arch))
              - task: smoke-test
                image: unit-image
                file: ci/tasks/smoke-test/task.yml
                input_mapping: { endpoint-info: outputs }
                params: { MAX_TICKS: 300 }
            ensure:
              task: terraform-cleanup
              image: unit-image
              file: ci/tasks/terraform-smoke/cleanup.yml
              params:
                GCP_PROJECT: cf-concourse-production
                GCP_KEY: ((concourse_smoke_gcp_key))
                SSH_KEY: ((concourse_smoke_ssh_key))
                WORKSPACE: bin-smoke-((.:runtime.runtime))-((.:runtime.arch))
                TF_VAR_GCP_IMAGE: ((.:gcp-image))
                TF_VAR_RUNTIME: ((.:runtime.runtime))
                TF_VAR_ARCH: ((.:runtime.arch))

  - name: quickstart-smoke
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            trigger: true
          - get: concourse-dev-image
            passed: [build-image]
            params: { format: oci }
            trigger: true
          - get: unit-image
          - get: ci
          - get: docs
      - task: quickstart-smoke
        privileged: true
        image: unit-image
        file: ci/tasks/quickstart-smoke/task.yml
        input_mapping: { concourse-rc-image: concourse-dev-image }
        params:
          RELEASE_NAME: concourse-smoke

  - name: bosh-check-props
    public: true
    max_in_flight: 1
    plan:
      - in_parallel:
          - get: concourse
            passed: [bin-smoke]
            trigger: true
          - get: unit-image
          - get: linux-amd64
            passed: [bin-smoke]
            trigger: true
          - get: concourse-release-repo
            trigger: true
          - get: ci
      - task: check-props
        file: ci/tasks/check-distribution-env/task.yml
        image: unit-image
        input_mapping:
          { distribution: concourse-release-repo, linux-rc: linux-amd64 }
        params: { DISTRIBUTION: bosh }

  - name: bosh-bump
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: concourse
            passed: [build-concourse]
            trigger: true
          - get: unit-image
          - get: linux-amd64
            passed: [build-concourse]
            trigger: true
          - get: windows-amd64
            passed: [build-concourse]
            trigger: true
          - get: concourse-release-repo
          - get: ci
      - task: bump-concourse-blobs
        file: ci/tasks/bump-concourse-blobs/task.yml
        image: unit-image
        input_mapping: { linux-rc: linux-amd64, windows-rc: windows-amd64 }
        params: { GCP_JSON_KEY: ((concourse_artifacts_json_key)) }
      - put: concourse-release-repo
        no_get: true
        inputs: detect
        params: { repository: bumped-concourse-release-repo }

  - name: bosh-upload-releases
    public: true
    serial: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-bump]
          - get: unit-image
          - get: concourse-release
            trigger: true
          - get: postgres-release
            trigger: true
          - get: bpm-release
            trigger: true
          - get: gcp-jammy-stemcell
            trigger: true
          - get: bbr-sdk-release
            trigger: true
          - get: vault-release
            trigger: true
          - get: credhub-release
            trigger: true
          - get: uaa-release
            trigger: true
          - get: bbr
            trigger: true
          - get: ci
      - task: upload-releases
        tags: [bosh]
        file: ci/tasks/upload-bosh-releases/task.yml
        image: unit-image
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))

  - name: bosh-smoke-containerd
    public: true
    serial: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-upload-releases]
          - get: unit-image
          - get: concourse-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: postgres-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bpm-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: gcp-jammy-stemcell
            passed: [bosh-upload-releases]
            trigger: true
          - get: ci
      - put: smoke-deployment
        tags: [bosh]
        params:
          recreate: true
          manifest: ci/deployments/bosh-smoke.yml
          ops_files:
            - ci/deployments/bosh-operations/runtime-containerd.yml
          releases:
            - concourse-release/*.tgz
            - postgres-release/*.tgz
            - bpm-release/*.tgz
          stemcells:
            - gcp-jammy-stemcell/*.tgz
          vars:
            deployment_name: concourse-smoke
            stemcell_variant: jammy
      - task: discover-bosh-endpoint-info
        tags: [bosh]
        file: ci/tasks/discover-bosh-endpoint-info/task.yml
        image: unit-image
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
          BOSH_DEPLOYMENT: concourse-smoke
          BOSH_INSTANCE_GROUP: concourse
      - task: smoke
        tags: [bosh]
        image: unit-image
        file: ci/tasks/smoke/task.yml
        timeout: 1h

  - name: bosh-smoke-guardian
    public: true
    serial: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-upload-releases]
          - get: unit-image
          - get: concourse-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: postgres-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bpm-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: gcp-jammy-stemcell
            passed: [bosh-upload-releases]
            trigger: true
          - get: ci
      - put: smoke-deployment-guardian
        tags: [bosh]
        params:
          recreate: true
          manifest: ci/deployments/bosh-smoke.yml
          ops_files:
            - ci/deployments/bosh-operations/runtime-guardian.yml
          releases:
            - concourse-release/*.tgz
            - postgres-release/*.tgz
            - bpm-release/*.tgz
          stemcells:
            - gcp-jammy-stemcell/*.tgz
          vars:
            deployment_name: concourse-smoke-guardian
            stemcell_variant: jammy
      - task: discover-bosh-endpoint-info
        tags: [bosh]
        file: ci/tasks/discover-bosh-endpoint-info/task.yml
        image: unit-image
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
          BOSH_DEPLOYMENT: concourse-smoke-guardian
          BOSH_INSTANCE_GROUP: concourse
      - task: smoke
        tags: [bosh]
        image: unit-image
        file: ci/tasks/smoke/task.yml
        timeout: 1h

  - name: bosh-topgun-core
    public: true
    serial: true
    interruptible: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-upload-releases]
          - get: unit-image
          - get: concourse-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: postgres-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bpm-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr-sdk-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: gcp-jammy-stemcell
            passed: [bosh-upload-releases]
            trigger: true
          - get: vault-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: credhub-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: uaa-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr
            passed: [bosh-upload-releases]
            trigger: true
          - get: ci
      - task: bosh-topgun
        tags: [bosh]
        file: ci/tasks/bosh-topgun/task.yml
        image: unit-image
        input_mapping:
          stemcell: gcp-jammy-stemcell
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
          # AWS_REGION: ((topgun_aws_ssm.region))
          # AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
          # AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
          SUITE: core
          STEMCELL_VARIANT: jammy

  - name: bosh-topgun-runtime
    public: true
    serial: true
    interruptible: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-upload-releases]
          - get: unit-image
          - get: concourse-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: postgres-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bpm-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr-sdk-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: gcp-jammy-stemcell
            passed: [bosh-upload-releases]
            trigger: true
          - get: vault-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: credhub-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: uaa-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr
            passed: [bosh-upload-releases]
            trigger: true
          - get: ci
      - task: bosh-topgun
        tags: [bosh]
        file: ci/tasks/bosh-topgun/task.yml
        image: unit-image
        input_mapping:
          stemcell: gcp-jammy-stemcell
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
          # AWS_REGION: ((topgun_aws_ssm.region))
          # AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
          # AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
          SUITE: runtime
          STEMCELL_VARIANT: jammy

  - name: bosh-topgun-both
    public: true
    serial: true
    interruptible: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-upload-releases]
          - get: unit-image
          - get: concourse-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: postgres-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bpm-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr-sdk-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: gcp-jammy-stemcell
            passed: [bosh-upload-releases]
            trigger: true
          - get: vault-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: credhub-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: uaa-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr
            passed: [bosh-upload-releases]
            trigger: true
          - get: ci
      - task: bosh-topgun
        tags: [bosh]
        file: ci/tasks/bosh-topgun/task.yml
        image: unit-image
        input_mapping:
          stemcell: gcp-jammy-stemcell
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
          # AWS_REGION: ((topgun_aws_ssm.region))
          # AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
          # AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
          SUITE: both
          STEMCELL_VARIANT: jammy

  - name: bosh-topgun-pcf
    public: true
    serial: true
    interruptible: true
    plan:
      - in_parallel:
          # these don't trigger, to ensure that the job gets triggered by
          # concourse-release, which is unfortunately decoupled from the resource
          # that we 'put' to.
          - get: concourse
            passed: [bosh-upload-releases]
          - get: unit-image
          - get: concourse-release
            passed: [bosh-upload-releases]
            trigger: true
          #  disabled until backup and restore supports 16+ of postgres https://github.com/cloudfoundry/backup-and-restore-sdk-release/blob/main/docs/database-backup-restore.md#supported-database-adapters
          # - get: postgres-release
          #   passed: [bosh-upload-releases]
          #   trigger: true
          - get: postgres-bbr-compatible-release
            trigger: true
          - get: bpm-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr-sdk-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: gcp-jammy-stemcell
            passed: [bosh-upload-releases]
            trigger: true
          - get: vault-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: credhub-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: uaa-release
            passed: [bosh-upload-releases]
            trigger: true
          - get: bbr
            passed: [bosh-upload-releases]
            trigger: true
          - get: ci
      - task: bosh-topgun
        tags: [bosh]
        file: ci/tasks/bosh-topgun/task.yml
        image: unit-image
        input_mapping:
          stemcell: gcp-jammy-stemcell
          postgres-release: postgres-bbr-compatible-release
        params:
          BOSH_ENVIRONMENT: https://10.0.0.6:25555
          BOSH_CA_CERT: ((testing_bosh_ca_cert))
          BOSH_CLIENT: ((testing_bosh_client.id))
          BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
          # AWS_REGION: ((topgun_aws_ssm.region))
          # AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
          # AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
          SUITE: pcf
          STEMCELL_VARIANT: jammy

resources:
  - name: concourse
    type: git
    icon: &git-icon github
    source:
      uri: https://github.com/concourse/concourse.git
      branch: master

  - name: ci
    type: git
    icon: *git-icon
    source:
      uri: https://github.com/concourse/ci.git
      branch: master

  - name: ci-unit-image
    type: git
    icon: *git-icon
    source:
      uri: https://github.com/concourse/ci.git
      branch: master
      paths:
        - dockerfiles/unit

  - name: infrastructure
    type: git
    icon: github
    source:
      uri: git@github.com:concourse/infrastructure.git
      branch: master
      private_key: ((greenpeace_private_key))

  - name: infrastructure-bump
    type: git
    icon: github
    source:
      uri: git@github.com:concourse/infrastructure.git
      branch: master
      private_key: ((greenpeace_private_key))

  - name: dev-image
    type: registry-image
    icon: &image-icon docker
    source:
      repository: concourse/dev
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: concourse-image
    type: registry-image
    icon: *image-icon
    source:
      repository: concourse/concourse
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: unit-image
    type: registry-image
    icon: *image-icon
    source:
      repository: concourse/unit
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: golang-builder-image
    type: registry-image
    icon: *image-icon
    source:
      repository: concourse/golang-builder
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: postgres-image
    type: registry-image
    icon: *image-icon
    source: { repository: postgres }

  - name: postgres-image-legacy
    type: registry-image
    icon: *image-icon
    source: { repository: postgres, tag: 11 }

  - name: vault-image
    type: registry-image
    icon: *image-icon
    source: { repository: vault }

  - name: bbr
    type: github-release
    icon: &release-icon package-variant-closed
    source:
      owner: cloudfoundry-incubator
      repository: bosh-backup-and-restore
      access_token: ((concourse_github_dummy.access_token))

  - name: containerd
    type: github-release
    icon: *release-icon
    source:
      owner: containerd
      repository: containerd
      access_token: ((concourse_github_dummy.access_token))

  - name: runc
    type: github-release
    icon: *release-icon
    source:
      owner: opencontainers
      repository: runc
      access_token: ((concourse_github_dummy.access_token))

  - name: dumb-init
    type: github-release
    icon: *release-icon
    source:
      owner: Yelp
      repository: dumb-init
      access_token: ((concourse_github_dummy.access_token))

  - name: gdn
    type: github-release
    icon: *release-icon
    source:
      owner: cloudfoundry
      repository: garden-runc-release
      access_token: ((concourse_github_dummy.access_token))

  - name: cni
    type: github-release
    icon: *release-icon
    source:
      owner: containernetworking
      repository: plugins
      access_token: ((concourse_github_dummy.access_token))

  - name: mock-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/mock-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: bosh-io-release-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/bosh-io-release-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: bosh-io-stemcell-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/bosh-io-stemcell-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: docker-image-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/docker-image-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: git-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/git-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: github-release-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/github-release-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: hg-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/hg-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: pool-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/pool-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: registry-image-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/registry-image-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: s3-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/s3-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: semver-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/semver-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: time-resource
    type: registry-image
    icon: *release-icon
    check_every: 4h
    source:
      repository: concourse/time-resource
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: oci-build-task
    type: registry-image
    icon: *image-icon
    source: { repository: concourse/oci-build-task }

  - name: linux-amd64
    type: gcs
    icon: linux
    source:
      bucket: concourse-artifacts
      json_key: ((concourse_artifacts_json_key))
      regexp: dev/concourse-(.*)\.linux\.amd64\.tgz

  - name: linux-arm64
    type: gcs
    icon: linux
    source:
      bucket: concourse-artifacts
      json_key: ((concourse_artifacts_json_key))
      regexp: dev/concourse-(.*)\.linux\.arm64\.tgz

  - name: windows-amd64
    type: gcs
    icon: microsoft-windows
    source:
      bucket: concourse-artifacts
      json_key: ((concourse_artifacts_json_key))
      regexp: dev/concourse-(.*)\.windows\.amd64\.zip

  - name: darwin-amd64
    type: gcs
    icon: apple
    source:
      bucket: concourse-artifacts
      json_key: ((concourse_artifacts_json_key))
      regexp: dev/concourse-(.*)\.darwin\.amd64\.tgz

  - name: darwin-arm64
    type: gcs
    icon: apple
    source:
      bucket: concourse-artifacts
      json_key: ((concourse_artifacts_json_key))
      regexp: dev/concourse-(.*)\.darwin\.arm64\.tgz

  - name: docs
    type: git
    icon: *git-icon
    source:
      uri: https://github.com/concourse/docs
      branch: master

  - name: concourse-release
    type: bosh-release
    icon: *release-icon
    source:
      uri: https://github.com/concourse/concourse-bosh-release
      branch: master
      dev_releases: true
      private_config: &release_private_config
        blobstore:
          provider: gcs
          options:
            credentials_source: static
            json_key: ((concourse_artifacts_json_key))

  - name: postgres-release
    type: bosh-io-release
    icon: *release-icon
    source:
      repository: cloudfoundry/postgres-release

  - name: postgres-bbr-compatible-release
    type: bosh-io-release
    icon: *release-icon
    source:
      repository: cloudfoundry/postgres-release
      regexp: "49"

  - name: bpm-release
    type: bosh-io-release
    icon: *release-icon
    source:
      repository: cloudfoundry/bpm-release

  - name: bbr-sdk-release
    type: bosh-io-release
    icon: *release-icon
    source:
      repository: cloudfoundry-incubator/backup-and-restore-sdk-release

  - name: vault-release
    type: bosh-io-release
    icon: *release-icon
    source:
      #TODO: migrate to https://github.com/cloudfoundry-community/vault-boshrelease ?
      repository: vito/vault-boshrelease

  - name: credhub-release
    type: bosh-io-release
    icon: *release-icon
    source:
      repository: pivotal-cf/credhub-release

  - name: uaa-release
    type: bosh-io-release
    icon: *release-icon
    source:
      repository: cloudfoundry/uaa-release

  - name: concourse-release-repo
    type: git
    icon: *git-icon
    source:
      uri: git@github.com:concourse/concourse-bosh-release
      branch: master
      private_key: ((concourse_release_deploy_key))

  - name: smoke-deployment
    tags: [bosh]
    type: bosh-deployment
    icon: fire
    source:
      target: https://10.0.0.6:25555
      client: ((testing_bosh_client.id))
      client_secret: ((testing_bosh_client.secret))
      ca_cert: ((testing_bosh_ca_cert))
      deployment: concourse-smoke

  - name: smoke-deployment-guardian
    tags: [bosh]
    type: bosh-deployment
    icon: fire
    source:
      target: https://10.0.0.6:25555
      client: ((testing_bosh_client.id))
      client_secret: ((testing_bosh_client.secret))
      ca_cert: ((testing_bosh_ca_cert))
      deployment: concourse-smoke-guardian

  - name: gcp-jammy-stemcell
    type: bosh-io-stemcell
    icon: *release-icon
    source:
      name: bosh-google-kvm-ubuntu-jammy-go_agent

  - name: concourse-docker
    type: git
    icon: *git-icon
    source:
      uri: https://github.com/concourse/concourse-docker
      branch: master

  - name: concourse-chart
    type: git
    icon: *git-icon
    source:
      uri: git@github.com:concourse/concourse-chart.git
      branch: dev
      private_key: ((concourse_chart_private_key))

  - name: prometheus-chart
    type: helm-chart
    icon: &helm-icon ship-wheel
    source:
      chart: prometheus-community/prometheus
      repos:
        - name: prometheus-community
          url: https://prometheus-community.github.io/helm-charts

  # Using the git instead of helm-chart resource because Bitnami charts are
  # hosted on Docker Hub and we sometimes run into their rate limits
  - name: postgresql-chart-git
    type: git
    check_every: 24h
    source:
      uri: "https://github.com/bitnami/charts.git"
      tag_filter: postgresql/((postgresql_major))*

  - name: resource-types-image
    type: registry-image
    icon: &image-icon docker
    source:
      repository: concourse/resource-types
      tag: dev
      username: ((docker.username))
      password: ((docker.password))

  - name: concourse-dev-image
    type: registry-image
    icon: *image-icon
    source:
      repository: concourse/concourse-dev
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: wolfi-base
    type: registry-image
    icon: *image-icon
    check_every: 6h
    source:
      repository: cgr.dev/chainguard/wolfi-base
      tag: latest

  - name: golang-linux
    type: s3
    icon: language-go
    source:
      endpoint: storage.googleapis.com
      bucket: golang
      regexp: 'go(\d+\.\d+(\.\d+)?)\.linux-amd64\.tar\.gz$'
